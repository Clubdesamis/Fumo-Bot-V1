
ProjetTemporaire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d08  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08004ecc  08004ecc  00005ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef0  08004ef0  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ef0  08004ef0  00005ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ef8  08004ef8  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ef8  08004ef8  00005ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004f00  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000005c  08004f5c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004f5c  00006300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b4a  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002784  00000000  00000000  00016bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00019360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b58  00000000  00000000  0001a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024306  00000000  00000000  0001ad50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f9a  00000000  00000000  0003f056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddd86  00000000  00000000  00051ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012fd76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fcc  00000000  00000000  0012fdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00133d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004eb4 	.word	0x08004eb4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08004eb4 	.word	0x08004eb4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <InitHeaderCommand>:
 */

#include "command.h"

Command InitHeaderCommand(uint8_t servoCount, uint32_t size)
{
 8000530:	b490      	push	{r4, r7}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	460b      	mov	r3, r1
 800053a:	607a      	str	r2, [r7, #4]
 800053c:	72fb      	strb	r3, [r7, #11]
	Command command;
	command.commandType = COMMAND_HEADER;
 800053e:	2301      	movs	r3, #1
 8000540:	753b      	strb	r3, [r7, #20]
	command.commandHeader.servoCount = servoCount;
 8000542:	7afb      	ldrb	r3, [r7, #11]
 8000544:	763b      	strb	r3, [r7, #24]
	command.commandHeader.size = size;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	61fb      	str	r3, [r7, #28]
	return command;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	461c      	mov	r4, r3
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800055a:	68f8      	ldr	r0, [r7, #12]
 800055c:	3720      	adds	r7, #32
 800055e:	46bd      	mov	sp, r7
 8000560:	bc90      	pop	{r4, r7}
 8000562:	4770      	bx	lr

08000564 <InitStartCommand>:

Command InitStartCommand()
{
 8000564:	b490      	push	{r4, r7}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	Command command;
	command.commandType = COMMAND_START;
 800056c:	2302      	movs	r3, #2
 800056e:	733b      	strb	r3, [r7, #12]
	return command;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	461c      	mov	r4, r3
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800057c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bc90      	pop	{r4, r7}
 8000588:	4770      	bx	lr

0800058a <InitFinishCommand>:

Command InitFinishCommand()
{
 800058a:	b490      	push	{r4, r7}
 800058c:	b086      	sub	sp, #24
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
	Command command;
	command.commandType = COMMAND_FINISH;
 8000592:	2303      	movs	r3, #3
 8000594:	733b      	strb	r3, [r7, #12]
	return command;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	461c      	mov	r4, r3
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc90      	pop	{r4, r7}
 80005ae:	4770      	bx	lr

080005b0 <InitSetAngleD1Command>:
	command.commandSetAngleD0.angle = angle;
	return command;
}

Command InitSetAngleD1Command(float angle, float speed)
{
 80005b0:	b490      	push	{r4, r7}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80005bc:	edc7 0a01 	vstr	s1, [r7, #4]
	Command command;
	command.commandType = COMMAND_SET_ANGLE_D1;
 80005c0:	2305      	movs	r3, #5
 80005c2:	753b      	strb	r3, [r7, #20]
	command.commandSetAngleD1.angle = angle;
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	61bb      	str	r3, [r7, #24]
	command.commandSetAngleD1.speed = speed;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	61fb      	str	r3, [r7, #28]
	return command;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	461c      	mov	r4, r3
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80005d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc90      	pop	{r4, r7}
 80005e4:	4770      	bx	lr

080005e6 <InitWaitCommand>:

Command InitWaitCommand(uint32_t timeMs)
{
 80005e6:	b490      	push	{r4, r7}
 80005e8:	b086      	sub	sp, #24
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
 80005ee:	6039      	str	r1, [r7, #0]
	Command command;
	command.commandType = COMMAND_WAIT;
 80005f0:	2306      	movs	r3, #6
 80005f2:	733b      	strb	r3, [r7, #12]
	command.commandWait.timeToSleepMs = timeMs;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	613b      	str	r3, [r7, #16]
	command.commandWait.timeSleptMs = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
	return command;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	461c      	mov	r4, r3
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bc90      	pop	{r4, r7}
 8000614:	4770      	bx	lr
	...

08000618 <LoadBounceEmote>:

	free(emote);
}

Command** LoadBounceEmote(uint32_t* count)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0fa      	sub	sp, #488	@ 0x1e8
 800061c:	af00      	add	r7, sp, #0
 800061e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000622:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8000626:	6018      	str	r0, [r3, #0]
	Command armRightCommands[] =
	{
		InitHeaderCommand(1, 0),
 8000628:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff ff7d 	bl	8000530 <InitHeaderCommand>
		InitStartCommand(),
 8000636:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff92 	bl	8000564 <InitStartCommand>

		InitWaitCommand(300),
 8000640:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000644:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffcc 	bl	80005e6 <InitWaitCommand>
		InitSetAngleD1Command(160, 200),
 800064e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000652:	eddf 0adb 	vldr	s1, [pc, #876]	@ 80009c0 <LoadBounceEmote+0x3a8>
 8000656:	ed9f 0adb 	vldr	s0, [pc, #876]	@ 80009c4 <LoadBounceEmote+0x3ac>
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffa8 	bl	80005b0 <InitSetAngleD1Command>
		InitSetAngleD1Command(90, 200),
 8000660:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8000664:	eddf 0ad6 	vldr	s1, [pc, #856]	@ 80009c0 <LoadBounceEmote+0x3a8>
 8000668:	ed9f 0ad7 	vldr	s0, [pc, #860]	@ 80009c8 <LoadBounceEmote+0x3b0>
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff9f 	bl	80005b0 <InitSetAngleD1Command>
		InitWaitCommand(100),
 8000672:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000676:	2164      	movs	r1, #100	@ 0x64
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff ffb4 	bl	80005e6 <InitWaitCommand>
		InitSetAngleD1Command(160, 200),
 800067e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8000682:	eddf 0acf 	vldr	s1, [pc, #828]	@ 80009c0 <LoadBounceEmote+0x3a8>
 8000686:	ed9f 0acf 	vldr	s0, [pc, #828]	@ 80009c4 <LoadBounceEmote+0x3ac>
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff90 	bl	80005b0 <InitSetAngleD1Command>
		InitSetAngleD1Command(90, 200),
 8000690:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000694:	eddf 0aca 	vldr	s1, [pc, #808]	@ 80009c0 <LoadBounceEmote+0x3a8>
 8000698:	ed9f 0acb 	vldr	s0, [pc, #812]	@ 80009c8 <LoadBounceEmote+0x3b0>
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff87 	bl	80005b0 <InitSetAngleD1Command>
		InitWaitCommand(100),
 80006a2:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80006a6:	2164      	movs	r1, #100	@ 0x64
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff ff9c 	bl	80005e6 <InitWaitCommand>
		InitSetAngleD1Command(160, 200),
 80006ae:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80006b2:	eddf 0ac3 	vldr	s1, [pc, #780]	@ 80009c0 <LoadBounceEmote+0x3a8>
 80006b6:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 80009c4 <LoadBounceEmote+0x3ac>
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff78 	bl	80005b0 <InitSetAngleD1Command>
		InitSetAngleD1Command(90, 200),
 80006c0:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80006c4:	eddf 0abe 	vldr	s1, [pc, #760]	@ 80009c0 <LoadBounceEmote+0x3a8>
 80006c8:	ed9f 0abf 	vldr	s0, [pc, #764]	@ 80009c8 <LoadBounceEmote+0x3b0>
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ff6f 	bl	80005b0 <InitSetAngleD1Command>
		InitWaitCommand(100),
 80006d2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80006d6:	2164      	movs	r1, #100	@ 0x64
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff84 	bl	80005e6 <InitWaitCommand>
		InitSetAngleD1Command(160, 200),
 80006de:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 80006e2:	eddf 0ab7 	vldr	s1, [pc, #732]	@ 80009c0 <LoadBounceEmote+0x3a8>
 80006e6:	ed9f 0ab7 	vldr	s0, [pc, #732]	@ 80009c4 <LoadBounceEmote+0x3ac>
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff60 	bl	80005b0 <InitSetAngleD1Command>
		InitSetAngleD1Command(90, 200),
 80006f0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80006f4:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 80009c0 <LoadBounceEmote+0x3a8>
 80006f8:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 80009c8 <LoadBounceEmote+0x3b0>
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff57 	bl	80005b0 <InitSetAngleD1Command>
		InitWaitCommand(500),
 8000702:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8000706:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff6b 	bl	80005e6 <InitWaitCommand>

		InitFinishCommand(),
 8000710:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff38 	bl	800058a <InitFinishCommand>
	};

	Command armLeftCommands[] =
	{
			InitHeaderCommand(1, 0),
 800071a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800071e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000722:	2200      	movs	r2, #0
 8000724:	2101      	movs	r1, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff02 	bl	8000530 <InitHeaderCommand>
			InitStartCommand(),
 800072c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000730:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000734:	330c      	adds	r3, #12
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff ff14 	bl	8000564 <InitStartCommand>

			InitWaitCommand(300),
 800073c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000740:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000744:	3318      	adds	r3, #24
 8000746:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff4b 	bl	80005e6 <InitWaitCommand>
			InitSetAngleD1Command(160, 200),
 8000750:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000754:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000758:	3324      	adds	r3, #36	@ 0x24
 800075a:	eddf 0a99 	vldr	s1, [pc, #612]	@ 80009c0 <LoadBounceEmote+0x3a8>
 800075e:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 80009c4 <LoadBounceEmote+0x3ac>
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ff24 	bl	80005b0 <InitSetAngleD1Command>
			InitSetAngleD1Command(90, 200),
 8000768:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800076c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000770:	3330      	adds	r3, #48	@ 0x30
 8000772:	eddf 0a93 	vldr	s1, [pc, #588]	@ 80009c0 <LoadBounceEmote+0x3a8>
 8000776:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 80009c8 <LoadBounceEmote+0x3b0>
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ff18 	bl	80005b0 <InitSetAngleD1Command>
			InitWaitCommand(100),
 8000780:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000784:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000788:	333c      	adds	r3, #60	@ 0x3c
 800078a:	2164      	movs	r1, #100	@ 0x64
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff2a 	bl	80005e6 <InitWaitCommand>
			InitSetAngleD1Command(160, 200),
 8000792:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000796:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800079a:	3348      	adds	r3, #72	@ 0x48
 800079c:	eddf 0a88 	vldr	s1, [pc, #544]	@ 80009c0 <LoadBounceEmote+0x3a8>
 80007a0:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 80009c4 <LoadBounceEmote+0x3ac>
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff03 	bl	80005b0 <InitSetAngleD1Command>
			InitSetAngleD1Command(90, 200),
 80007aa:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80007ae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80007b2:	3354      	adds	r3, #84	@ 0x54
 80007b4:	eddf 0a82 	vldr	s1, [pc, #520]	@ 80009c0 <LoadBounceEmote+0x3a8>
 80007b8:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 80009c8 <LoadBounceEmote+0x3b0>
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fef7 	bl	80005b0 <InitSetAngleD1Command>
			InitWaitCommand(100),
 80007c2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80007c6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80007ca:	3360      	adds	r3, #96	@ 0x60
 80007cc:	2164      	movs	r1, #100	@ 0x64
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff09 	bl	80005e6 <InitWaitCommand>
			InitSetAngleD1Command(160, 200),
 80007d4:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80007d8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80007dc:	336c      	adds	r3, #108	@ 0x6c
 80007de:	eddf 0a78 	vldr	s1, [pc, #480]	@ 80009c0 <LoadBounceEmote+0x3a8>
 80007e2:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 80009c4 <LoadBounceEmote+0x3ac>
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fee2 	bl	80005b0 <InitSetAngleD1Command>
			InitSetAngleD1Command(90, 200),
 80007ec:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80007f0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80007f4:	3378      	adds	r3, #120	@ 0x78
 80007f6:	eddf 0a72 	vldr	s1, [pc, #456]	@ 80009c0 <LoadBounceEmote+0x3a8>
 80007fa:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 80009c8 <LoadBounceEmote+0x3b0>
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff fed6 	bl	80005b0 <InitSetAngleD1Command>
			InitWaitCommand(100),
 8000804:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000808:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800080c:	3384      	adds	r3, #132	@ 0x84
 800080e:	2164      	movs	r1, #100	@ 0x64
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fee8 	bl	80005e6 <InitWaitCommand>
			InitSetAngleD1Command(160, 200),
 8000816:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800081a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800081e:	3390      	adds	r3, #144	@ 0x90
 8000820:	eddf 0a67 	vldr	s1, [pc, #412]	@ 80009c0 <LoadBounceEmote+0x3a8>
 8000824:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 80009c4 <LoadBounceEmote+0x3ac>
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fec1 	bl	80005b0 <InitSetAngleD1Command>
			InitSetAngleD1Command(90, 200),
 800082e:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000832:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000836:	339c      	adds	r3, #156	@ 0x9c
 8000838:	eddf 0a61 	vldr	s1, [pc, #388]	@ 80009c0 <LoadBounceEmote+0x3a8>
 800083c:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80009c8 <LoadBounceEmote+0x3b0>
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff feb5 	bl	80005b0 <InitSetAngleD1Command>
			InitWaitCommand(500),
 8000846:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800084a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800084e:	33a8      	adds	r3, #168	@ 0xa8
 8000850:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fec6 	bl	80005e6 <InitWaitCommand>

			InitFinishCommand(),
 800085a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800085e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000862:	33b4      	adds	r3, #180	@ 0xb4
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fe90 	bl	800058a <InitFinishCommand>
	};

	Command bounceRightCommands[] =
	{
			InitHeaderCommand(1, 0),
 800086a:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 800086e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000872:	2200      	movs	r2, #0
 8000874:	2101      	movs	r1, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe5a 	bl	8000530 <InitHeaderCommand>
			InitStartCommand(),
 800087c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000880:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000884:	330c      	adds	r3, #12
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe6c 	bl	8000564 <InitStartCommand>
			InitWaitCommand(100),
			InitSetAngleD1Command(140, 200),
			InitSetAngleD1Command(90, 200),
			InitWaitCommand(500),
			*/
			InitFinishCommand(),
 800088c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 8000890:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8000894:	3318      	adds	r3, #24
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fe77 	bl	800058a <InitFinishCommand>
	};

	Command bounceLeftCommands[] =
	{
			InitHeaderCommand(1, 0),
 800089c:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80008a0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe41 	bl	8000530 <InitHeaderCommand>
			InitStartCommand(),
 80008ae:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80008b2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80008b6:	330c      	adds	r3, #12
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff fe53 	bl	8000564 <InitStartCommand>
			InitSetAngleD1Command(90, 200),
			InitSetAngleD1Command(140, 200),
			InitWaitCommand(500),
			*/

			InitFinishCommand(),
 80008be:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80008c2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80008c6:	3318      	adds	r3, #24
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe5e 	bl	800058a <InitFinishCommand>
	};

	armRightCommands[0].commandHeader.size = sizeof(armRightCommands) / sizeof(Command);
 80008ce:	2310      	movs	r3, #16
 80008d0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	armLeftCommands[0].commandHeader.size = sizeof(armLeftCommands) / sizeof(Command);
 80008d4:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80008d8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80008dc:	2210      	movs	r2, #16
 80008de:	609a      	str	r2, [r3, #8]
	bounceRightCommands[0].commandHeader.size = sizeof(bounceRightCommands) / sizeof(Command);
 80008e0:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80008e4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80008e8:	2203      	movs	r2, #3
 80008ea:	609a      	str	r2, [r3, #8]
	bounceLeftCommands[0].commandHeader.size = sizeof(bounceLeftCommands) / sizeof(Command);
 80008ec:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80008f0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80008f4:	2203      	movs	r2, #3
 80008f6:	609a      	str	r2, [r3, #8]


	Command* armRightBuffer = malloc(sizeof(armRightCommands));
 80008f8:	20c0      	movs	r0, #192	@ 0xc0
 80008fa:	f004 f9d3 	bl	8004ca4 <malloc>
 80008fe:	4603      	mov	r3, r0
 8000900:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
	Command* armLeftBuffer = malloc(sizeof(armLeftCommands));
 8000904:	20c0      	movs	r0, #192	@ 0xc0
 8000906:	f004 f9cd 	bl	8004ca4 <malloc>
 800090a:	4603      	mov	r3, r0
 800090c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
	Command* bounceRightBuffer = malloc(sizeof(bounceRightCommands));
 8000910:	2024      	movs	r0, #36	@ 0x24
 8000912:	f004 f9c7 	bl	8004ca4 <malloc>
 8000916:	4603      	mov	r3, r0
 8000918:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
	Command* bounceLeftBuffer = malloc(sizeof(bounceLeftCommands));
 800091c:	2024      	movs	r0, #36	@ 0x24
 800091e:	f004 f9c1 	bl	8004ca4 <malloc>
 8000922:	4603      	mov	r3, r0
 8000924:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

	memcpy(armRightBuffer, armRightCommands, sizeof(armRightCommands));
 8000928:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800092c:	22c0      	movs	r2, #192	@ 0xc0
 800092e:	4619      	mov	r1, r3
 8000930:	f8d7 01e4 	ldr.w	r0, [r7, #484]	@ 0x1e4
 8000934:	f004 fab0 	bl	8004e98 <memcpy>
	memcpy(armLeftBuffer, armLeftCommands, sizeof(armLeftCommands));
 8000938:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800093c:	22c0      	movs	r2, #192	@ 0xc0
 800093e:	4619      	mov	r1, r3
 8000940:	f8d7 01e0 	ldr.w	r0, [r7, #480]	@ 0x1e0
 8000944:	f004 faa8 	bl	8004e98 <memcpy>
	memcpy(bounceRightBuffer, bounceRightCommands, sizeof(bounceRightCommands));
 8000948:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800094c:	2224      	movs	r2, #36	@ 0x24
 800094e:	4619      	mov	r1, r3
 8000950:	f8d7 01dc 	ldr.w	r0, [r7, #476]	@ 0x1dc
 8000954:	f004 faa0 	bl	8004e98 <memcpy>
	memcpy(bounceLeftBuffer, bounceLeftCommands, sizeof(bounceLeftCommands));
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2224      	movs	r2, #36	@ 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8000964:	f004 fa98 	bl	8004e98 <memcpy>

	Command** commands = malloc(4 * sizeof(Command*));
 8000968:	2010      	movs	r0, #16
 800096a:	f004 f99b 	bl	8004ca4 <malloc>
 800096e:	4603      	mov	r3, r0
 8000970:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	commands[0] = armRightBuffer;
 8000974:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000978:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 800097c:	601a      	str	r2, [r3, #0]
	commands[1] = armLeftBuffer;
 800097e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000982:	3304      	adds	r3, #4
 8000984:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8000988:	601a      	str	r2, [r3, #0]
	commands[2] = bounceRightBuffer;
 800098a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800098e:	3308      	adds	r3, #8
 8000990:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000994:	601a      	str	r2, [r3, #0]
	commands[3] = bounceLeftBuffer;
 8000996:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800099a:	330c      	adds	r3, #12
 800099c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80009a0:	601a      	str	r2, [r3, #0]


	*count = 4;
 80009a2:	f507 73f4 	add.w	r3, r7, #488	@ 0x1e8
 80009a6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2204      	movs	r2, #4
 80009ae:	601a      	str	r2, [r3, #0]
	return commands;
 80009b0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	f507 77f4 	add.w	r7, r7, #488	@ 0x1e8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	43480000 	.word	0x43480000
 80009c4:	43200000 	.word	0x43200000
 80009c8:	42b40000 	.word	0x42b40000

080009cc <LoadWaveEmote>:

Command** LoadWaveEmote(uint32_t* count)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b0cc      	sub	sp, #304	@ 0x130
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80009d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80009da:	6018      	str	r0, [r3, #0]
	Command armRightCommands[] =
	{
		InitHeaderCommand(1, 0),
 80009dc:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80009e0:	2200      	movs	r2, #0
 80009e2:	2101      	movs	r1, #1
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fda3 	bl	8000530 <InitHeaderCommand>
		InitStartCommand(),
 80009ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fdb8 	bl	8000564 <InitStartCommand>
		InitWaitCommand(300),
 80009f4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80009f8:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fdf2 	bl	80005e6 <InitWaitCommand>
		InitSetAngleD1Command(160, 350),
 8000a02:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000a06:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8000c38 <LoadWaveEmote+0x26c>
 8000a0a:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8000c3c <LoadWaveEmote+0x270>
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fdce 	bl	80005b0 <InitSetAngleD1Command>
		InitSetAngleD1Command(90, 350),
 8000a14:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000a18:	eddf 0a87 	vldr	s1, [pc, #540]	@ 8000c38 <LoadWaveEmote+0x26c>
 8000a1c:	ed9f 0a88 	vldr	s0, [pc, #544]	@ 8000c40 <LoadWaveEmote+0x274>
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fdc5 	bl	80005b0 <InitSetAngleD1Command>
		InitSetAngleD1Command(160, 350),
 8000a26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a2a:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8000c38 <LoadWaveEmote+0x26c>
 8000a2e:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 8000c3c <LoadWaveEmote+0x270>
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fdbc 	bl	80005b0 <InitSetAngleD1Command>
		InitSetAngleD1Command(90, 350),
 8000a38:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8000a3c:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8000c38 <LoadWaveEmote+0x26c>
 8000a40:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8000c40 <LoadWaveEmote+0x274>
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fdb3 	bl	80005b0 <InitSetAngleD1Command>
		InitSetAngleD1Command(160, 350),
 8000a4a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000a4e:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8000c38 <LoadWaveEmote+0x26c>
 8000a52:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 8000c3c <LoadWaveEmote+0x270>
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fdaa 	bl	80005b0 <InitSetAngleD1Command>
		InitSetAngleD1Command(70, 350),
 8000a5c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8000a60:	eddf 0a75 	vldr	s1, [pc, #468]	@ 8000c38 <LoadWaveEmote+0x26c>
 8000a64:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8000c44 <LoadWaveEmote+0x278>
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff fda1 	bl	80005b0 <InitSetAngleD1Command>
		InitWaitCommand(1000),
 8000a6e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000a72:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fdb5 	bl	80005e6 <InitWaitCommand>
		InitFinishCommand(),
 8000a7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fd82 	bl	800058a <InitFinishCommand>
	};

	Command armLeftCommands[] =
	{
		InitHeaderCommand(1, 0),
 8000a86:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fd4e 	bl	8000530 <InitHeaderCommand>
		InitStartCommand(),
 8000a94:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff fd63 	bl	8000564 <InitStartCommand>
		InitFinishCommand(),
 8000a9e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fd71 	bl	800058a <InitFinishCommand>
	};

	Command bounceRightCommands[] =
	{
		InitHeaderCommand(1, 0),
 8000aa8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000aac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fd3b 	bl	8000530 <InitHeaderCommand>
		InitStartCommand(),
 8000aba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000abe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ac2:	330c      	adds	r3, #12
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fd4d 	bl	8000564 <InitStartCommand>
		InitSetAngleD1Command(140, 200),
 8000aca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ace:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ad2:	3318      	adds	r3, #24
 8000ad4:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 8000c48 <LoadWaveEmote+0x27c>
 8000ad8:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8000c4c <LoadWaveEmote+0x280>
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd67 	bl	80005b0 <InitSetAngleD1Command>
		InitWaitCommand(1100),
 8000ae2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000aea:	3324      	adds	r3, #36	@ 0x24
 8000aec:	f240 414c 	movw	r1, #1100	@ 0x44c
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fd78 	bl	80005e6 <InitWaitCommand>
		InitSetAngleD1Command(90, 200),
 8000af6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000afa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000afe:	3330      	adds	r3, #48	@ 0x30
 8000b00:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8000c48 <LoadWaveEmote+0x27c>
 8000b04:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8000c40 <LoadWaveEmote+0x274>
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fd51 	bl	80005b0 <InitSetAngleD1Command>
		InitFinishCommand(),
 8000b0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b16:	333c      	adds	r3, #60	@ 0x3c
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fd36 	bl	800058a <InitFinishCommand>
	};

	Command bounceLeftCommands[] =
	{
		InitHeaderCommand(1, 0),
 8000b1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b22:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b26:	2200      	movs	r2, #0
 8000b28:	2101      	movs	r1, #1
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fd00 	bl	8000530 <InitHeaderCommand>
		InitStartCommand(),
 8000b30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b34:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b38:	330c      	adds	r3, #12
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fd12 	bl	8000564 <InitStartCommand>
		//InitSetAngleD1Command(120, 120),
		InitFinishCommand(),
 8000b40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b44:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b48:	3318      	adds	r3, #24
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fd1d 	bl	800058a <InitFinishCommand>
	};

	armRightCommands[0].commandHeader.size = sizeof(armRightCommands) / sizeof(Command);
 8000b50:	230b      	movs	r3, #11
 8000b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	armLeftCommands[0].commandHeader.size = sizeof(armLeftCommands) / sizeof(Command);
 8000b56:	2303      	movs	r3, #3
 8000b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
	bounceRightCommands[0].commandHeader.size = sizeof(bounceRightCommands) / sizeof(Command);
 8000b5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000b62:	2206      	movs	r2, #6
 8000b64:	609a      	str	r2, [r3, #8]
	bounceLeftCommands[0].commandHeader.size = sizeof(bounceLeftCommands) / sizeof(Command);
 8000b66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000b6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000b6e:	2203      	movs	r2, #3
 8000b70:	609a      	str	r2, [r3, #8]


	Command* armRightBuffer = malloc(sizeof(armRightCommands));
 8000b72:	2084      	movs	r0, #132	@ 0x84
 8000b74:	f004 f896 	bl	8004ca4 <malloc>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	Command* armLeftBuffer = malloc(sizeof(armLeftCommands));
 8000b7e:	2024      	movs	r0, #36	@ 0x24
 8000b80:	f004 f890 	bl	8004ca4 <malloc>
 8000b84:	4603      	mov	r3, r0
 8000b86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	Command* bounceRightBuffer = malloc(sizeof(bounceRightCommands));
 8000b8a:	2048      	movs	r0, #72	@ 0x48
 8000b8c:	f004 f88a 	bl	8004ca4 <malloc>
 8000b90:	4603      	mov	r3, r0
 8000b92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	Command* bounceLeftBuffer = malloc(sizeof(bounceLeftCommands));
 8000b96:	2024      	movs	r0, #36	@ 0x24
 8000b98:	f004 f884 	bl	8004ca4 <malloc>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	memcpy(armRightBuffer, armRightCommands, sizeof(armRightCommands));
 8000ba2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000ba6:	2284      	movs	r2, #132	@ 0x84
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8000bae:	f004 f973 	bl	8004e98 <memcpy>
	memcpy(armLeftBuffer, armLeftCommands, sizeof(armLeftCommands));
 8000bb2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000bb6:	2224      	movs	r2, #36	@ 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8000bbe:	f004 f96b 	bl	8004e98 <memcpy>
	memcpy(bounceRightBuffer, bounceRightCommands, sizeof(bounceRightCommands));
 8000bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc6:	2248      	movs	r2, #72	@ 0x48
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8000bce:	f004 f963 	bl	8004e98 <memcpy>
	memcpy(bounceLeftBuffer, bounceLeftCommands, sizeof(bounceLeftCommands));
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2224      	movs	r2, #36	@ 0x24
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8000bde:	f004 f95b 	bl	8004e98 <memcpy>

	Command** commands = malloc(4 * sizeof(Command*));
 8000be2:	2010      	movs	r0, #16
 8000be4:	f004 f85e 	bl	8004ca4 <malloc>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	commands[0] = armRightBuffer;
 8000bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000bf2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000bf6:	601a      	str	r2, [r3, #0]
	commands[1] = armLeftBuffer;
 8000bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000c02:	601a      	str	r2, [r3, #0]
	commands[2] = bounceRightBuffer;
 8000c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000c08:	3308      	adds	r3, #8
 8000c0a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8000c0e:	601a      	str	r2, [r3, #0]
	commands[3] = bounceLeftBuffer;
 8000c10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8000c14:	330c      	adds	r3, #12
 8000c16:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8000c1a:	601a      	str	r2, [r3, #0]


	*count = 4;
 8000c1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	2204      	movs	r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
	return commands;
 8000c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	43af0000 	.word	0x43af0000
 8000c3c:	43200000 	.word	0x43200000
 8000c40:	42b40000 	.word	0x42b40000
 8000c44:	428c0000 	.word	0x428c0000
 8000c48:	43480000 	.word	0x43480000
 8000c4c:	430c0000 	.word	0x430c0000

08000c50 <ResetEmoteTracks>:
static Command** currentEmote;
static EmotePlayerTrack* tracks;
static EmotePlayerState playerState;

void ResetEmoteTracks()
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < servoCount; i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	e025      	b.n	8000ca8 <ResetEmoteTracks+0x58>
	{
		tracks[i].commandIndex = 0;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <ResetEmoteTracks+0x70>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	011b      	lsls	r3, r3, #4
 8000c64:	4413      	add	r3, r2
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
		tracks[i].currentCommand = COMMAND_HEADER;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <ResetEmoteTracks+0x70>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	4413      	add	r3, r2
 8000c74:	2201      	movs	r2, #1
 8000c76:	731a      	strb	r2, [r3, #12]
		tracks[i].state = STATE_STOPPED;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <ResetEmoteTracks+0x70>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	011b      	lsls	r3, r3, #4
 8000c80:	4413      	add	r3, r2
 8000c82:	2200      	movs	r2, #0
 8000c84:	739a      	strb	r2, [r3, #14]
		tracks[i].syncId = 0;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <ResetEmoteTracks+0x70>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	4413      	add	r3, r2
 8000c90:	2200      	movs	r2, #0
 8000c92:	735a      	strb	r2, [r3, #13]
		tracks[i].commands = NULL;
 8000c94:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc0 <ResetEmoteTracks+0x70>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	011b      	lsls	r3, r3, #4
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < servoCount; i++)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <ResetEmoteTracks+0x74>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d3d4      	bcc.n	8000c5c <ResetEmoteTracks+0xc>
		//tracks[i].servo = servoHandles[i];
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20000084 	.word	0x20000084
 8000cc4:	20000078 	.word	0x20000078

08000cc8 <InitEmotePlayer>:

void InitEmotePlayer(EmotePlayerInit* emoteInit)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	servoCount = emoteInit->servoCount;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	791b      	ldrb	r3, [r3, #4]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <InitEmotePlayer+0xb4>)
 8000cd8:	601a      	str	r2, [r3, #0]
	servoHandles = emoteInit->servos;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a28      	ldr	r2, [pc, #160]	@ (8000d80 <InitEmotePlayer+0xb8>)
 8000ce0:	6013      	str	r3, [r2, #0]
	playerState = STATE_STOPPED;
 8000ce2:	4b28      	ldr	r3, [pc, #160]	@ (8000d84 <InitEmotePlayer+0xbc>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
	tracks = malloc(sizeof(EmotePlayerTrack) * servoCount);
 8000ce8:	4b24      	ldr	r3, [pc, #144]	@ (8000d7c <InitEmotePlayer+0xb4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	011b      	lsls	r3, r3, #4
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 ffd8 	bl	8004ca4 <malloc>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b23      	ldr	r3, [pc, #140]	@ (8000d88 <InitEmotePlayer+0xc0>)
 8000cfa:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < servoCount; i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	e031      	b.n	8000d66 <InitEmotePlayer+0x9e>
	{
		tracks[i].commandIndex = 0;
 8000d02:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <InitEmotePlayer+0xc0>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	4413      	add	r3, r2
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
		tracks[i].currentCommand = COMMAND_HEADER;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <InitEmotePlayer+0xc0>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	4413      	add	r3, r2
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	731a      	strb	r2, [r3, #12]
		tracks[i].state = STATE_STOPPED;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <InitEmotePlayer+0xc0>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	011b      	lsls	r3, r3, #4
 8000d26:	4413      	add	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	739a      	strb	r2, [r3, #14]
		tracks[i].syncId = 0;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <InitEmotePlayer+0xc0>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	4413      	add	r3, r2
 8000d36:	2200      	movs	r2, #0
 8000d38:	735a      	strb	r2, [r3, #13]
		tracks[i].commands = NULL;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <InitEmotePlayer+0xc0>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	4413      	add	r3, r2
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
		tracks[i].servo = emoteInit->servos[i];
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	441a      	add	r2, r3
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <InitEmotePlayer+0xc0>)
 8000d54:	6819      	ldr	r1, [r3, #0]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	440b      	add	r3, r1
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
	for(uint32_t i = 0; i < servoCount; i++)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	3301      	adds	r3, #1
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <InitEmotePlayer+0xb4>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d3c8      	bcc.n	8000d02 <InitEmotePlayer+0x3a>
	}
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000078 	.word	0x20000078
 8000d80:	2000007c 	.word	0x2000007c
 8000d84:	20000088 	.word	0x20000088
 8000d88:	20000084 	.word	0x20000084

08000d8c <getPlayerState>:

EmotePlayerState getPlayerState()
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	return playerState;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <getPlayerState+0x14>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000088 	.word	0x20000088

08000da4 <StartEmote>:
{
	free(tracks);
}

void StartEmote(Command** emote, uint32_t trackCount)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	if(trackCount != servoCount)
 8000dae:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <StartEmote+0x6c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	683a      	ldr	r2, [r7, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d003      	beq.n	8000dc0 <StartEmote+0x1c>
	{
		playerState = STATE_ERROR;
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <StartEmote+0x70>)
 8000dba:	2202      	movs	r2, #2
 8000dbc:	701a      	strb	r2, [r3, #0]
		return;
 8000dbe:	e022      	b.n	8000e06 <StartEmote+0x62>
	}

	currentEmote = emote;
 8000dc0:	4a15      	ldr	r2, [pc, #84]	@ (8000e18 <StartEmote+0x74>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
	playerState = STATE_PLAYING;
 8000dc6:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <StartEmote+0x70>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	701a      	strb	r2, [r3, #0]

	for(uint32_t i = 0; i < servoCount; i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	e014      	b.n	8000dfc <StartEmote+0x58>
	{
		tracks[i].commands = emote[i];
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	441a      	add	r2, r3
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <StartEmote+0x78>)
 8000ddc:	6819      	ldr	r1, [r3, #0]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	440b      	add	r3, r1
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	601a      	str	r2, [r3, #0]
		tracks[i].state = STATE_PLAYING;
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <StartEmote+0x78>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	4413      	add	r3, r2
 8000df2:	2201      	movs	r2, #1
 8000df4:	739a      	strb	r2, [r3, #14]
	for(uint32_t i = 0; i < servoCount; i++)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <StartEmote+0x6c>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d3e5      	bcc.n	8000dd2 <StartEmote+0x2e>
	}
}
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	20000078 	.word	0x20000078
 8000e14:	20000088 	.word	0x20000088
 8000e18:	20000080 	.word	0x20000080
 8000e1c:	20000084 	.word	0x20000084

08000e20 <HandleCommandHeader>:

void HandleCommandHeader(EmotePlayerTrack* track, uint32_t deltatime)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	if(track->commands[track->commandIndex].commandType == COMMAND_HEADER)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d105      	bne.n	8000e4e <HandleCommandHeader+0x2e>
	{
		//Read header if necessary
		track->commandIndex++;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
	}
	else
	{
		track->state = STATE_ERROR;
	}
}
 8000e4c:	e002      	b.n	8000e54 <HandleCommandHeader+0x34>
		track->state = STATE_ERROR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2202      	movs	r2, #2
 8000e52:	739a      	strb	r2, [r3, #14]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HandleCommandStart>:

void HandleCommandStart(EmotePlayerTrack* track, uint32_t deltatime)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	if(track->state == STATE_PLAYING)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7b9b      	ldrb	r3, [r3, #14]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <HandleCommandStart+0x1e>
	{
		track->commandIndex++;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
	}
	else
	{
		track->state = STATE_ERROR;
	}
}
 8000e7c:	e002      	b.n	8000e84 <HandleCommandStart+0x24>
		track->state = STATE_ERROR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2202      	movs	r2, #2
 8000e82:	739a      	strb	r2, [r3, #14]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <HandleCommandFinish>:

void HandleCommandFinish(EmotePlayerTrack* track, uint32_t deltatime)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	track->state = STATE_STOPPED;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	739a      	strb	r2, [r3, #14]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HandleCommandSetAngleD0>:

void HandleCommandSetAngleD0(EmotePlayerTrack* track, uint32_t deltatime)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	SetServoAngleD0(track->servo, track->commands[track->commandIndex].commandSetAngleD0.angle);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6858      	ldr	r0, [r3, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6819      	ldr	r1, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	f000 fbae 	bl	8001634 <SetServoAngleD0>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HandleCommandSetAngleD1>:

void HandleCommandSetAngleD1(EmotePlayerTrack* track, uint32_t deltatime)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
			speed--;
		}
	}
	*/

	if(track->servo->moving)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00e      	beq.n	8000f14 <HandleCommandSetAngleD1+0x34>
	{
		if(UpdateServoPosition(track->servo, deltatime))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	6839      	ldr	r1, [r7, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fc79 	bl	80017f4 <UpdateServoPosition>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d023      	beq.n	8000f50 <HandleCommandSetAngleD1+0x70>
		{
			track->commandIndex++;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	609a      	str	r2, [r3, #8]
	}
	else
	{
		SetServoAngleD1(track->servo, track->commands[track->commandIndex].commandSetAngleD1.angle, track->commands[track->commandIndex].commandSetAngleD1.speed);
	}
}
 8000f12:	e01d      	b.n	8000f50 <HandleCommandSetAngleD1+0x70>
		SetServoAngleD1(track->servo, track->commands[track->commandIndex].commandSetAngleD1.angle, track->commands[track->commandIndex].commandSetAngleD1.speed);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6858      	ldr	r0, [r3, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6819      	ldr	r1, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	440b      	add	r3, r1
 8000f2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6819      	ldr	r1, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f44:	eef0 0a47 	vmov.f32	s1, s14
 8000f48:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4c:	f000 fc12 	bl	8001774 <SetServoAngleD1>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HandleCommandWait>:

void HandleCommandWait(EmotePlayerTrack* track, uint32_t deltatime)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
	track->commands[track->commandIndex].commandWait.timeSleptMs += deltatime;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	6899      	ldr	r1, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	4403      	add	r3, r0
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	440a      	add	r2, r1
 8000f8c:	609a      	str	r2, [r3, #8]
	if(track->commands[track->commandIndex].commandWait.timeSleptMs >= track->commands[track->commandIndex].commandWait.timeToSleepMs)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6819      	ldr	r1, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	6899      	ldr	r1, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6818      	ldr	r0, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4403      	add	r3, r0
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4299      	cmp	r1, r3
 8000fb8:	d30f      	bcc.n	8000fda <HandleCommandWait+0x82>
	{
		track->commands[track->commandIndex].commandWait.timeSleptMs = 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
		track->commandIndex++;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
	}
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HandleCommandSync>:

void HandleCommandSync(EmotePlayerTrack* track, uint32_t deltatime)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]

}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <UpdateEmotePlayer>:

void UpdateEmotePlayer(uint32_t deltatime)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	if(playerState == STATE_PLAYING)
 8001004:	4b4c      	ldr	r3, [pc, #304]	@ (8001138 <UpdateEmotePlayer+0x13c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	f040 8090 	bne.w	800112e <UpdateEmotePlayer+0x132>
	{
		bool finished = true;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
		for(uint32_t i = 0; i < servoCount; i++)
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	e07c      	b.n	8001112 <UpdateEmotePlayer+0x116>
		{
			if(tracks[i].state == STATE_PLAYING)
 8001018:	4b48      	ldr	r3, [pc, #288]	@ (800113c <UpdateEmotePlayer+0x140>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4413      	add	r3, r2
 8001022:	7b9b      	ldrb	r3, [r3, #14]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d171      	bne.n	800110c <UpdateEmotePlayer+0x110>
			{
				switch(tracks[i].commands[tracks[i].commandIndex].commandType)
 8001028:	4b44      	ldr	r3, [pc, #272]	@ (800113c <UpdateEmotePlayer+0x140>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	011b      	lsls	r3, r3, #4
 8001030:	4413      	add	r3, r2
 8001032:	6819      	ldr	r1, [r3, #0]
 8001034:	4b41      	ldr	r3, [pc, #260]	@ (800113c <UpdateEmotePlayer+0x140>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	4413      	add	r3, r2
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3b01      	subs	r3, #1
 800104e:	2b06      	cmp	r3, #6
 8001050:	d856      	bhi.n	8001100 <UpdateEmotePlayer+0x104>
 8001052:	a201      	add	r2, pc, #4	@ (adr r2, 8001058 <UpdateEmotePlayer+0x5c>)
 8001054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001058:	08001075 	.word	0x08001075
 800105c:	08001089 	.word	0x08001089
 8001060:	0800109d 	.word	0x0800109d
 8001064:	080010b1 	.word	0x080010b1
 8001068:	080010c5 	.word	0x080010c5
 800106c:	080010d9 	.word	0x080010d9
 8001070:	080010ed 	.word	0x080010ed
				{
					case COMMAND_HEADER:
						HandleCommandHeader(&tracks[i], deltatime);
 8001074:	4b31      	ldr	r3, [pc, #196]	@ (800113c <UpdateEmotePlayer+0x140>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	011b      	lsls	r3, r3, #4
 800107c:	4413      	add	r3, r2
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fecd 	bl	8000e20 <HandleCommandHeader>
					break;
 8001086:	e03f      	b.n	8001108 <UpdateEmotePlayer+0x10c>
					case COMMAND_START:
						HandleCommandStart(&tracks[i], deltatime);
 8001088:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <UpdateEmotePlayer+0x140>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4413      	add	r3, r2
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fee3 	bl	8000e60 <HandleCommandStart>
					break;
 800109a:	e035      	b.n	8001108 <UpdateEmotePlayer+0x10c>
					case COMMAND_FINISH:
						HandleCommandFinish(&tracks[i], deltatime);
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <UpdateEmotePlayer+0x140>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4413      	add	r3, r2
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fef1 	bl	8000e90 <HandleCommandFinish>
					break;
 80010ae:	e02b      	b.n	8001108 <UpdateEmotePlayer+0x10c>
					case COMMAND_SET_ANGLE_D0:
						HandleCommandSetAngleD0(&tracks[i], deltatime);
 80010b0:	4b22      	ldr	r3, [pc, #136]	@ (800113c <UpdateEmotePlayer+0x140>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	4413      	add	r3, r2
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fef5 	bl	8000eac <HandleCommandSetAngleD0>
					break;
 80010c2:	e021      	b.n	8001108 <UpdateEmotePlayer+0x10c>
					case COMMAND_SET_ANGLE_D1:
						HandleCommandSetAngleD1(&tracks[i], deltatime);
 80010c4:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <UpdateEmotePlayer+0x140>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff05 	bl	8000ee0 <HandleCommandSetAngleD1>
					break;
 80010d6:	e017      	b.n	8001108 <UpdateEmotePlayer+0x10c>
					case COMMAND_WAIT:
						HandleCommandWait(&tracks[i], deltatime);
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <UpdateEmotePlayer+0x140>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	4413      	add	r3, r2
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff37 	bl	8000f58 <HandleCommandWait>
					break;
 80010ea:	e00d      	b.n	8001108 <UpdateEmotePlayer+0x10c>
					case COMMAND_SYNC:
						HandleCommandSync(&tracks[i], deltatime);
 80010ec:	4b13      	ldr	r3, [pc, #76]	@ (800113c <UpdateEmotePlayer+0x140>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	011b      	lsls	r3, r3, #4
 80010f4:	4413      	add	r3, r2
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff74 	bl	8000fe6 <HandleCommandSync>
					break;
 80010fe:	e003      	b.n	8001108 <UpdateEmotePlayer+0x10c>
					default:
						playerState = STATE_ERROR;
 8001100:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <UpdateEmotePlayer+0x13c>)
 8001102:	2202      	movs	r2, #2
 8001104:	701a      	strb	r2, [r3, #0]
					break;
 8001106:	bf00      	nop
				}

				finished = false;
 8001108:	2300      	movs	r3, #0
 800110a:	73fb      	strb	r3, [r7, #15]
		for(uint32_t i = 0; i < servoCount; i++)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	3301      	adds	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <UpdateEmotePlayer+0x144>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	429a      	cmp	r2, r3
 800111a:	f4ff af7d 	bcc.w	8001018 <UpdateEmotePlayer+0x1c>
			}
		}

		if(finished)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d004      	beq.n	800112e <UpdateEmotePlayer+0x132>
		{
			playerState = STATE_STOPPED;
 8001124:	4b04      	ldr	r3, [pc, #16]	@ (8001138 <UpdateEmotePlayer+0x13c>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
			ResetEmoteTracks();
 800112a:	f7ff fd91 	bl	8000c50 <ResetEmoteTracks>
		}
	}
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000088 	.word	0x20000088
 800113c:	20000084 	.word	0x20000084
 8001140:	20000078 	.word	0x20000078

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114a:	f000 ff6d 	bl	8002028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114e:	f000 f81f 	bl	8001190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001152:	f000 f99f 	bl	8001494 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001156:	f000 f973 	bl	8001440 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800115a:	f000 f8d9 	bl	8001310 <MX_TIM2_Init>
  MX_ADC1_Init();
 800115e:	f000 f885 	bl	800126c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_ADC_Start(&hadc1);
 8001162:	4809      	ldr	r0, [pc, #36]	@ (8001188 <main+0x44>)
 8001164:	f001 f83a 	bl	80021dc <HAL_ADC_Start>
  /* USER CODE BEGIN 2 */
  Handlers handlers =
 8001168:	4a08      	ldr	r2, [pc, #32]	@ (800118c <main+0x48>)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	ca07      	ldmia	r2, {r0, r1, r2}
 800116e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  .htim2 = &htim2,
		  .huart2 = &huart2,
		  .hadc1 = &hadc1
  };

  InitHandlers(&handlers);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fd77 	bl	8001c68 <InitHandlers>

  InitServos();
 800117a:	f000 fd87 	bl	8001c8c <InitServos>
  InitEmoteplayer();
 800117e:	f000 fe31 	bl	8001de4 <InitEmoteplayer>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  UserLoop();
 8001182:	f000 fe67 	bl	8001e54 <UserLoop>
 8001186:	e7fc      	b.n	8001182 <main+0x3e>
 8001188:	2000008c 	.word	0x2000008c
 800118c:	08004ecc 	.word	0x08004ecc

08001190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b094      	sub	sp, #80	@ 0x50
 8001194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	2234      	movs	r2, #52	@ 0x34
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fe36 	bl	8004e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001264 <SystemClock_Config+0xd4>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	4a29      	ldr	r2, [pc, #164]	@ (8001264 <SystemClock_Config+0xd4>)
 80011be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c4:	4b27      	ldr	r3, [pc, #156]	@ (8001264 <SystemClock_Config+0xd4>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011d0:	2300      	movs	r3, #0
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <SystemClock_Config+0xd8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011dc:	4a22      	ldr	r2, [pc, #136]	@ (8001268 <SystemClock_Config+0xd8>)
 80011de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <SystemClock_Config+0xd8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	2310      	movs	r3, #16
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001204:	2310      	movs	r3, #16
 8001206:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001208:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800120c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800120e:	2304      	movs	r3, #4
 8001210:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001212:	2302      	movs	r3, #2
 8001214:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001216:	2302      	movs	r3, #2
 8001218:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4618      	mov	r0, r3
 8001220:	f002 f952 	bl	80034c8 <HAL_RCC_OscConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800122a:	f000 f9a1 	bl	8001570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800122e:	230f      	movs	r3, #15
 8001230:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001232:	2302      	movs	r3, #2
 8001234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800123a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	2102      	movs	r1, #2
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fdf2 	bl	8002e34 <HAL_RCC_ClockConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001256:	f000 f98b 	bl	8001570 <Error_Handler>
  }
}
 800125a:	bf00      	nop
 800125c:	3750      	adds	r7, #80	@ 0x50
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40007000 	.word	0x40007000

0800126c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001272:	463b      	mov	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800127e:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <MX_ADC1_Init+0x98>)
 8001280:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <MX_ADC1_Init+0x9c>)
 8001282:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001284:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <MX_ADC1_Init+0x98>)
 8001286:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800128a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800128c:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <MX_ADC1_Init+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001292:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <MX_ADC1_Init+0x98>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001298:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <MX_ADC1_Init+0x98>)
 800129a:	2201      	movs	r2, #1
 800129c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129e:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <MX_ADC1_Init+0x98>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a6:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <MX_ADC1_Init+0x98>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <MX_ADC1_Init+0x98>)
 80012ae:	4a17      	ldr	r2, [pc, #92]	@ (800130c <MX_ADC1_Init+0xa0>)
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_ADC1_Init+0x98>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_ADC1_Init+0x98>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_ADC1_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_ADC1_Init+0x98>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012cc:	480d      	ldr	r0, [pc, #52]	@ (8001304 <MX_ADC1_Init+0x98>)
 80012ce:	f000 ff41 	bl	8002154 <HAL_ADC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 f94a 	bl	8001570 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012e0:	2301      	movs	r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <MX_ADC1_Init+0x98>)
 80012ee:	f001 f8df 	bl	80024b0 <HAL_ADC_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012f8:	f000 f93a 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000008c 	.word	0x2000008c
 8001308:	40012000 	.word	0x40012000
 800130c:	0f000001 	.word	0x0f000001

08001310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08e      	sub	sp, #56	@ 0x38
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
 800133c:	615a      	str	r2, [r3, #20]
 800133e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001340:	4b3d      	ldr	r3, [pc, #244]	@ (8001438 <MX_TIM2_Init+0x128>)
 8001342:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001346:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001348:	4b3b      	ldr	r3, [pc, #236]	@ (8001438 <MX_TIM2_Init+0x128>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b3a      	ldr	r3, [pc, #232]	@ (8001438 <MX_TIM2_Init+0x128>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1680000;
 8001354:	4b38      	ldr	r3, [pc, #224]	@ (8001438 <MX_TIM2_Init+0x128>)
 8001356:	4a39      	ldr	r2, [pc, #228]	@ (800143c <MX_TIM2_Init+0x12c>)
 8001358:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <MX_TIM2_Init+0x128>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001360:	4b35      	ldr	r3, [pc, #212]	@ (8001438 <MX_TIM2_Init+0x128>)
 8001362:	2280      	movs	r2, #128	@ 0x80
 8001364:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001366:	4834      	ldr	r0, [pc, #208]	@ (8001438 <MX_TIM2_Init+0x128>)
 8001368:	f002 fb4c 	bl	8003a04 <HAL_TIM_Base_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001372:	f000 f8fd 	bl	8001570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800137a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800137c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001380:	4619      	mov	r1, r3
 8001382:	482d      	ldr	r0, [pc, #180]	@ (8001438 <MX_TIM2_Init+0x128>)
 8001384:	f002 fd70 	bl	8003e68 <HAL_TIM_ConfigClockSource>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800138e:	f000 f8ef 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001392:	4829      	ldr	r0, [pc, #164]	@ (8001438 <MX_TIM2_Init+0x128>)
 8001394:	f002 fb85 	bl	8003aa2 <HAL_TIM_PWM_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800139e:	f000 f8e7 	bl	8001570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013aa:	f107 0320 	add.w	r3, r7, #32
 80013ae:	4619      	mov	r1, r3
 80013b0:	4821      	ldr	r0, [pc, #132]	@ (8001438 <MX_TIM2_Init+0x128>)
 80013b2:	f003 f937 	bl	8004624 <HAL_TIMEx_MasterConfigSynchronization>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80013bc:	f000 f8d8 	bl	8001570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c0:	2360      	movs	r3, #96	@ 0x60
 80013c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42000;
 80013c4:	f24a 4310 	movw	r3, #42000	@ 0xa410
 80013c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	2200      	movs	r2, #0
 80013d6:	4619      	mov	r1, r3
 80013d8:	4817      	ldr	r0, [pc, #92]	@ (8001438 <MX_TIM2_Init+0x128>)
 80013da:	f002 fc83 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013e4:	f000 f8c4 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2204      	movs	r2, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4812      	ldr	r0, [pc, #72]	@ (8001438 <MX_TIM2_Init+0x128>)
 80013f0:	f002 fc78 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013fa:	f000 f8b9 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2208      	movs	r2, #8
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <MX_TIM2_Init+0x128>)
 8001406:	f002 fc6d 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8001410:	f000 f8ae 	bl	8001570 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	220c      	movs	r2, #12
 8001418:	4619      	mov	r1, r3
 800141a:	4807      	ldr	r0, [pc, #28]	@ (8001438 <MX_TIM2_Init+0x128>)
 800141c:	f002 fc62 	bl	8003ce4 <HAL_TIM_PWM_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8001426:	f000 f8a3 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800142a:	4803      	ldr	r0, [pc, #12]	@ (8001438 <MX_TIM2_Init+0x128>)
 800142c:	f000 fb02 	bl	8001a34 <HAL_TIM_MspPostInit>

}
 8001430:	bf00      	nop
 8001432:	3738      	adds	r7, #56	@ 0x38
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200000d4 	.word	0x200000d4
 800143c:	0019a280 	.word	0x0019a280

08001440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <MX_USART2_UART_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 800144c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	@ (800148c <MX_USART2_UART_Init+0x4c>)
 8001478:	f003 f950 	bl	800471c <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001482:	f000 f875 	bl	8001570 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000011c 	.word	0x2000011c
 8001490:	40004400 	.word	0x40004400

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001564 <MX_GPIO_Init+0xd0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001564 <MX_GPIO_Init+0xd0>)
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001564 <MX_GPIO_Init+0xd0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <MX_GPIO_Init+0xd0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a25      	ldr	r2, [pc, #148]	@ (8001564 <MX_GPIO_Init+0xd0>)
 80014d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <MX_GPIO_Init+0xd0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <MX_GPIO_Init+0xd0>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <MX_GPIO_Init+0xd0>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <MX_GPIO_Init+0xd0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <MX_GPIO_Init+0xd0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a17      	ldr	r2, [pc, #92]	@ (8001564 <MX_GPIO_Init+0xd0>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <MX_GPIO_Init+0xd0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2120      	movs	r1, #32
 800151e:	4812      	ldr	r0, [pc, #72]	@ (8001568 <MX_GPIO_Init+0xd4>)
 8001520:	f001 fc6e 	bl	8002e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001524:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800152a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800152e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	4619      	mov	r1, r3
 800153a:	480c      	ldr	r0, [pc, #48]	@ (800156c <MX_GPIO_Init+0xd8>)
 800153c:	f001 facc 	bl	8002ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001540:	2320      	movs	r3, #32
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001544:	2301      	movs	r3, #1
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	4619      	mov	r1, r3
 8001556:	4804      	ldr	r0, [pc, #16]	@ (8001568 <MX_GPIO_Init+0xd4>)
 8001558:	f001 fabe 	bl	8002ad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800155c:	bf00      	nop
 800155e:	3728      	adds	r7, #40	@ 0x28
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40023800 	.word	0x40023800
 8001568:	40020000 	.word	0x40020000
 800156c:	40020800 	.word	0x40020800

08001570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <Error_Handler+0x8>

0800157c <InitServo>:
 */

#include "servo.h"

ServoHandle* InitServo(ServoInitConfig* servoInitConfig)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b092      	sub	sp, #72	@ 0x48
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	ServoHandle handle =
	{
		.timer = servoInitConfig->timer,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
	ServoHandle handle =
 8001588:	60fb      	str	r3, [r7, #12]
		.channel = servoInitConfig->channel,
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	791b      	ldrb	r3, [r3, #4]
	ServoHandle handle =
 800158e:	743b      	strb	r3, [r7, #16]
		.minPulseWidth = servoInitConfig->minPulseWidth,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
	ServoHandle handle =
 8001594:	617b      	str	r3, [r7, #20]
		.maxPulseWidth = servoInitConfig->maxPulseWidth,
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
	ServoHandle handle =
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
		.timestamp = 0,
		.pulsePerDegree = ((float)servoInitConfig->maxPulseWidth - (float)servoInitConfig->minPulseWidth) / servoInitConfig->maxAngle,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	ee07 3a90 	vmov	s15, r3
 80015a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	ee07 3a90 	vmov	s15, r3
 80015b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	ed93 7a04 	vldr	s14, [r3, #16]
 80015c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
	ServoHandle handle =
 80015c6:	edc7 7a08 	vstr	s15, [r7, #32]
		.maxAngle = servoInitConfig->maxAngle,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
	ServoHandle handle =
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
		.offsetAngle = servoInitConfig->offsetAngle,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
	ServoHandle handle =
 80015d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015ee:	f04f 0300 	mov.w	r3, #0
 80015f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		.currentAngle = 0,
		.targetAngle = 0,
		.currentSpeed = 0,
		.targetSpeed = 0,
		.currentAcceleration = 0,
		.inverted = servoInitConfig->inverted,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	7e1b      	ldrb	r3, [r3, #24]
	ServoHandle handle =
 80015f8:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
		.moving = false,
	};

	ServoHandle* _handle = malloc(sizeof(ServoHandle));
 8001602:	2038      	movs	r0, #56	@ 0x38
 8001604:	f003 fb4e 	bl	8004ca4 <malloc>
 8001608:	4603      	mov	r3, r0
 800160a:	647b      	str	r3, [r7, #68]	@ 0x44
	memcpy(_handle, &handle, sizeof(ServoHandle));
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2238      	movs	r2, #56	@ 0x38
 8001612:	4619      	mov	r1, r3
 8001614:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001616:	f003 fc3f 	bl	8004e98 <memcpy>
	HAL_TIM_PWM_Start(servoInitConfig->timer, servoInitConfig->channel);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	791b      	ldrb	r3, [r3, #4]
 8001622:	4619      	mov	r1, r3
 8001624:	4610      	mov	r0, r2
 8001626:	f002 fa95 	bl	8003b54 <HAL_TIM_PWM_Start>
	return _handle;
 800162a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800162c:	4618      	mov	r0, r3
 800162e:	3748      	adds	r7, #72	@ 0x48
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <SetServoAngleD0>:
{
	free(servoHandle);
}

void SetServoAngleD0(ServoHandle* servo, float angle)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	ed87 0a00 	vstr	s0, [r7]
	uint32_t pulse;
	if(servo->inverted)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01e      	beq.n	8001688 <SetServoAngleD0+0x54>
	{
		pulse = servo->maxPulseWidth - servo->pulsePerDegree * angle - servo->pulsePerDegree * servo->offsetAngle;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	edd3 6a05 	vldr	s13, [r3, #20]
 800165c:	edd7 7a00 	vldr	s15, [r7]
 8001660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 6a05 	vldr	s13, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	edd3 7a07 	vldr	s15, [r3, #28]
 8001674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001680:	ee17 3a90 	vmov	r3, s15
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e01d      	b.n	80016c4 <SetServoAngleD0+0x90>
	}
	else
	{
		pulse = servo->minPulseWidth + servo->pulsePerDegree * angle + servo->pulsePerDegree * servo->offsetAngle;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	edd3 6a05 	vldr	s13, [r3, #20]
 800169a:	edd7 7a00 	vldr	s15, [r7]
 800169e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	edd3 6a05 	vldr	s13, [r3, #20]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	edd3 7a07 	vldr	s15, [r3, #28]
 80016b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016be:	ee17 3a90 	vmov	r3, s15
 80016c2:	60fb      	str	r3, [r7, #12]
	}

	if(pulse > servo->maxPulseWidth)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d903      	bls.n	80016d6 <SetServoAngleD0+0xa2>
	{
		pulse = servo->maxPulseWidth;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e007      	b.n	80016e6 <SetServoAngleD0+0xb2>
	}
	else if(pulse < servo->minPulseWidth)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d202      	bcs.n	80016e6 <SetServoAngleD0+0xb2>
	{
		pulse = servo->minPulseWidth;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	60fb      	str	r3, [r7, #12]
	}

	if(angle < servo->maxAngle)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80016ec:	ed97 7a00 	vldr	s14, [r7]
 80016f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f8:	d50f      	bpl.n	800171a <SetServoAngleD0+0xe6>
	{
		if(angle > 0)
 80016fa:	edd7 7a00 	vldr	s15, [r7]
 80016fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001706:	dd03      	ble.n	8001710 <SetServoAngleD0+0xdc>
		{
			servo->currentAngle = angle;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	621a      	str	r2, [r3, #32]
 800170e:	e008      	b.n	8001722 <SetServoAngleD0+0xee>
		}
		else
		{
			servo->currentAngle = 0;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
 8001718:	e003      	b.n	8001722 <SetServoAngleD0+0xee>
		}
	}
	else
	{
		servo->currentAngle = servo->maxAngle;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699a      	ldr	r2, [r3, #24]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	621a      	str	r2, [r3, #32]
	}

	__HAL_TIM_SET_COMPARE(servo->timer, servo->channel, pulse);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	791b      	ldrb	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <SetServoAngleD0+0x102>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001734:	e018      	b.n	8001768 <SetServoAngleD0+0x134>
	__HAL_TIM_SET_COMPARE(servo->timer, servo->channel, pulse);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	791b      	ldrb	r3, [r3, #4]
 800173a:	2b04      	cmp	r3, #4
 800173c:	d105      	bne.n	800174a <SetServoAngleD0+0x116>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001748:	e00e      	b.n	8001768 <SetServoAngleD0+0x134>
	__HAL_TIM_SET_COMPARE(servo->timer, servo->channel, pulse);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	791b      	ldrb	r3, [r3, #4]
 800174e:	2b08      	cmp	r3, #8
 8001750:	d105      	bne.n	800175e <SetServoAngleD0+0x12a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800175c:	e004      	b.n	8001768 <SetServoAngleD0+0x134>
	__HAL_TIM_SET_COMPARE(servo->timer, servo->channel, pulse);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SetServoAngleD1>:

void SetServoAngleD1(ServoHandle* servo, float angle, float speed)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001780:	edc7 0a01 	vstr	s1, [r7, #4]
	if(angle + servo->offsetAngle > servo->maxAngle)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	ed93 7a07 	vldr	s14, [r3, #28]
 800178a:	edd7 7a02 	vldr	s15, [r7, #8]
 800178e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	edd3 7a06 	vldr	s15, [r3, #24]
 8001798:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	dd04      	ble.n	80017ac <SetServoAngleD1+0x38>
	{
		servo->targetAngle = servo->maxAngle;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	699a      	ldr	r2, [r3, #24]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80017aa:	e013      	b.n	80017d4 <SetServoAngleD1+0x60>
	}
	else if(angle + servo->offsetAngle < 0)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80017b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d504      	bpl.n	80017ce <SetServoAngleD1+0x5a>
	{
		servo->targetAngle = 0;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80017cc:	e002      	b.n	80017d4 <SetServoAngleD1+0x60>
	}
	else
	{
		servo->targetAngle = angle;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	625a      	str	r2, [r3, #36]	@ 0x24
	}

	servo->currentSpeed = speed;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	629a      	str	r2, [r3, #40]	@ 0x28
	servo->moving = true;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	servo->timestamp = HAL_GetTick();
 80017e2:	f000 fc87 	bl	80020f4 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	611a      	str	r2, [r3, #16]
}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <UpdateServoPosition>:

bool UpdateServoPosition(ServoHandle* servo, uint32_t deltatime)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	if(servo->moving)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 8081 	beq.w	800190c <UpdateServoPosition+0x118>
	{
		//uint32_t deltaTime = timestamp - servo->timestamp;
		//servo->timestamp = timestamp;
		float deltaAngle = ((float)deltatime * servo->currentSpeed) / 1000;
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800181a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181e:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8001918 <UpdateServoPosition+0x124>
 8001822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001826:	edc7 7a03 	vstr	s15, [r7, #12]

		//Going down
		if(servo->currentAngle > servo->targetAngle)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	dd2d      	ble.n	800189c <UpdateServoPosition+0xa8>
		{
			if(servo->currentAngle - deltaAngle < servo->targetAngle)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	ed93 7a08 	vldr	s14, [r3, #32]
 8001846:	edd7 7a03 	vldr	s15, [r7, #12]
 800184a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	d511      	bpl.n	8001882 <UpdateServoPosition+0x8e>
			{
				SetServoAngleD0(servo, servo->targetAngle);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fee3 	bl	8001634 <SetServoAngleD0>
				servo->currentSpeed = 0.0;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28
				servo->moving = false;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				return true;
 800187e:	2301      	movs	r3, #1
 8001880:	e045      	b.n	800190e <UpdateServoPosition+0x11a>
			}
			else
			{
				SetServoAngleD0(servo, servo->currentAngle - deltaAngle);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	ed93 7a08 	vldr	s14, [r3, #32]
 8001888:	edd7 7a03 	vldr	s15, [r7, #12]
 800188c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fecd 	bl	8001634 <SetServoAngleD0>
 800189a:	e037      	b.n	800190c <UpdateServoPosition+0x118>
			}
		}
		//Going up
		else if(servo->currentAngle < servo->targetAngle)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	ed93 7a08 	vldr	s14, [r3, #32]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80018a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d52c      	bpl.n	800190c <UpdateServoPosition+0x118>
		{
			if(servo->currentAngle + deltaAngle > servo->targetAngle)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	ed93 7a08 	vldr	s14, [r3, #32]
 80018b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80018c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	dd11      	ble.n	80018f4 <UpdateServoPosition+0x100>
			{
				SetServoAngleD0(servo, servo->targetAngle);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff feaa 	bl	8001634 <SetServoAngleD0>
				servo->currentSpeed = 0.0;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
				servo->moving = false;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
				return true;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e00c      	b.n	800190e <UpdateServoPosition+0x11a>
			}
			else
			{
				SetServoAngleD0(servo, servo->currentAngle + deltaAngle);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80018fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80018fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fe94 	bl	8001634 <SetServoAngleD0>

			}
		}
	}

	return false;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	447a0000 	.word	0x447a0000

0800191c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	4a0f      	ldr	r2, [pc, #60]	@ (8001968 <HAL_MspInit+0x4c>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001930:	6453      	str	r3, [r2, #68]	@ 0x44
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <HAL_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a08      	ldr	r2, [pc, #32]	@ (8001968 <HAL_MspInit+0x4c>)
 8001948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_MspInit+0x4c>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800195a:	2007      	movs	r0, #7
 800195c:	f001 f888 	bl	8002a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800

0800196c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	@ 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a17      	ldr	r2, [pc, #92]	@ (80019e8 <HAL_ADC_MspInit+0x7c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d127      	bne.n	80019de <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	4b16      	ldr	r3, [pc, #88]	@ (80019ec <HAL_ADC_MspInit+0x80>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001996:	4a15      	ldr	r2, [pc, #84]	@ (80019ec <HAL_ADC_MspInit+0x80>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199c:	6453      	str	r3, [r2, #68]	@ 0x44
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <HAL_ADC_MspInit+0x80>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_ADC_MspInit+0x80>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a0e      	ldr	r2, [pc, #56]	@ (80019ec <HAL_ADC_MspInit+0x80>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <HAL_ADC_MspInit+0x80>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019c6:	2301      	movs	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ca:	2303      	movs	r3, #3
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <HAL_ADC_MspInit+0x84>)
 80019da:	f001 f87d 	bl	8002ad8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	@ 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40012000 	.word	0x40012000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000

080019f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a04:	d10d      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_TIM_Base_MspInit+0x3c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_TIM_Base_MspInit+0x3c>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_TIM_Base_MspInit+0x3c>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a54:	d13d      	bne.n	8001ad2 <HAL_TIM_MspPostInit+0x9e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <HAL_TIM_MspPostInit+0xa8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001adc <HAL_TIM_MspPostInit+0xa8>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_TIM_MspPostInit+0xa8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_TIM_MspPostInit+0xa8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a18      	ldr	r2, [pc, #96]	@ (8001adc <HAL_TIM_MspPostInit+0xa8>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <HAL_TIM_MspPostInit+0xa8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PB2     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001a8e:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <HAL_TIM_MspPostInit+0xac>)
 8001aac:	f001 f814 	bl	8002ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001ab0:	f240 4304 	movw	r3, #1028	@ 0x404
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <HAL_TIM_MspPostInit+0xb0>)
 8001ace:	f001 f803 	bl	8002ad8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	@ 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400

08001ae8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	@ 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <HAL_UART_MspInit+0x84>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12b      	bne.n	8001b62 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <HAL_UART_MspInit+0x88>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	4a17      	ldr	r2, [pc, #92]	@ (8001b70 <HAL_UART_MspInit+0x88>)
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_UART_MspInit+0x88>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <HAL_UART_MspInit+0x88>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a10      	ldr	r2, [pc, #64]	@ (8001b70 <HAL_UART_MspInit+0x88>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_UART_MspInit+0x88>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b42:	230c      	movs	r3, #12
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b52:	2307      	movs	r3, #7
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4805      	ldr	r0, [pc, #20]	@ (8001b74 <HAL_UART_MspInit+0x8c>)
 8001b5e:	f000 ffbb 	bl	8002ad8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	@ 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000

08001b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <NMI_Handler+0x4>

08001b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b84:	bf00      	nop
 8001b86:	e7fd      	b.n	8001b84 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	bf00      	nop
 8001b8e:	e7fd      	b.n	8001b8c <MemManage_Handler+0x4>

08001b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b94:	bf00      	nop
 8001b96:	e7fd      	b.n	8001b94 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <UsageFault_Handler+0x4>

08001ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bce:	f000 fa7d 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f003 f91a 	bl	8004e40 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20020000 	.word	0x20020000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	20000164 	.word	0x20000164
 8001c40:	20000300 	.word	0x20000300

08001c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <InitHandlers>:
static bool doMiddleEmote = false;
static bool doCloseEmote = false;


void InitHandlers(const Handlers* _handlers)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	handlers = *_handlers;
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <InitHandlers+0x20>)
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000168 	.word	0x20000168

08001c8c <InitServos>:

void InitServos()
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b09c      	sub	sp, #112	@ 0x70
 8001c90:	af00      	add	r7, sp, #0


	ServoInitConfig armRightConfig =
	{
		.timer = handlers.htim2,
 8001c92:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc0 <InitServos+0x134>)
 8001c94:	681b      	ldr	r3, [r3, #0]
	ServoInitConfig armRightConfig =
 8001c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
 8001c9e:	f24a 4310 	movw	r3, #42000	@ 0xa410
 8001ca2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ca4:	4b47      	ldr	r3, [pc, #284]	@ (8001dc4 <InitServos+0x138>)
 8001ca6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ca8:	4b47      	ldr	r3, [pc, #284]	@ (8001dc8 <InitServos+0x13c>)
 8001caa:	667b      	str	r3, [r7, #100]	@ 0x64
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
		.maxAngle = 180.0,
		.offsetAngle = 0.0,
		.inverted = true
	};

	servoArmRight = InitServo(&armRightConfig);
 8001cb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fc5d 	bl	800157c <InitServo>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4a41      	ldr	r2, [pc, #260]	@ (8001dcc <InitServos+0x140>)
 8001cc6:	6013      	str	r3, [r2, #0]

	ServoInitConfig armLeftConfig =
	{
		.timer = handlers.htim2,
 8001cc8:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc0 <InitServos+0x134>)
 8001cca:	681b      	ldr	r3, [r3, #0]
	ServoInitConfig armLeftConfig =
 8001ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cce:	2304      	movs	r3, #4
 8001cd0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001cd4:	f24a 4310 	movw	r3, #42000	@ 0xa410
 8001cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cda:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <InitServos+0x138>)
 8001cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cde:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc8 <InitServos+0x13c>)
 8001ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
		.maxAngle = 180.0,
		.offsetAngle = 0.0,
		.inverted = false
	};

	servoArmLeft = InitServo(&armLeftConfig);
 8001cee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fc42 	bl	800157c <InitServo>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a35      	ldr	r2, [pc, #212]	@ (8001dd0 <InitServos+0x144>)
 8001cfc:	6013      	str	r3, [r2, #0]

	ServoInitConfig bounceRightConfig =
	{
		.timer = handlers.htim2,
 8001cfe:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <InitServos+0x134>)
 8001d00:	681b      	ldr	r3, [r3, #0]
	ServoInitConfig bounceRightConfig =
 8001d02:	61fb      	str	r3, [r7, #28]
 8001d04:	2308      	movs	r3, #8
 8001d06:	f887 3020 	strb.w	r3, [r7, #32]
 8001d0a:	f24a 4310 	movw	r3, #42000	@ 0xa410
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d10:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc4 <InitServos+0x138>)
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d14:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <InitServos+0x13c>)
 8001d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
		.maxAngle = 180.0,
		.offsetAngle = 0.0,
		.inverted = false
	};

	servoBounceRight = InitServo(&bounceRightConfig);
 8001d24:	f107 031c 	add.w	r3, r7, #28
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fc27 	bl	800157c <InitServo>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a28      	ldr	r2, [pc, #160]	@ (8001dd4 <InitServos+0x148>)
 8001d32:	6013      	str	r3, [r2, #0]

	ServoInitConfig bounceLeftConfig =
	{
		.timer = handlers.htim2,
 8001d34:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <InitServos+0x134>)
 8001d36:	681b      	ldr	r3, [r3, #0]
	ServoInitConfig bounceLeftConfig =
 8001d38:	603b      	str	r3, [r7, #0]
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	713b      	strb	r3, [r7, #4]
 8001d3e:	f24a 4310 	movw	r3, #42000	@ 0xa410
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc4 <InitServos+0x138>)
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc8 <InitServos+0x13c>)
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	2301      	movs	r3, #1
 8001d54:	763b      	strb	r3, [r7, #24]
		.maxAngle = 180.0,
		.offsetAngle = 0.0,
		.inverted = true
	};

	servoBounceLeft = InitServo(&bounceLeftConfig);
 8001d56:	463b      	mov	r3, r7
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fc0f 	bl	800157c <InitServo>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <InitServos+0x14c>)
 8001d62:	6013      	str	r3, [r2, #0]

	SetServoAngleD0(servoArmRight, 90);
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <InitServos+0x140>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001ddc <InitServos+0x150>
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fc61 	bl	8001634 <SetServoAngleD0>
	SetServoAngleD0(servoArmLeft, 90);
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <InitServos+0x144>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001ddc <InitServos+0x150>
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fc5a 	bl	8001634 <SetServoAngleD0>
	SetServoAngleD0(servoBounceRight, 90);
 8001d80:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <InitServos+0x148>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001ddc <InitServos+0x150>
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fc53 	bl	8001634 <SetServoAngleD0>
	SetServoAngleD0(servoBounceLeft, 90);
 8001d8e:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <InitServos+0x14c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001ddc <InitServos+0x150>
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fc4c 	bl	8001634 <SetServoAngleD0>

	HAL_Delay(500);
 8001d9c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001da0:	f000 f9b4 	bl	800210c <HAL_Delay>
	//SetServoAngleD0(servoArmLeft, 60);
	//HAL_Delay(1000);
	//SetServoAngleD1(servoArmRight, 120, 30);
	//SetServoAngleD1(servoArmRight, 120, 30);
	//SetServoAngleD1(servoArmLeft, 120, 30);
	SetServoAngleD1(servoArmLeft, 120, 30);
 8001da4:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <InitServos+0x144>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 8001dac:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001de0 <InitServos+0x154>
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff fcdf 	bl	8001774 <SetServoAngleD1>
}
 8001db6:	bf00      	nop
 8001db8:	3770      	adds	r7, #112	@ 0x70
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000168 	.word	0x20000168
 8001dc4:	00033450 	.word	0x00033450
 8001dc8:	43340000 	.word	0x43340000
 8001dcc:	20000178 	.word	0x20000178
 8001dd0:	2000017c 	.word	0x2000017c
 8001dd4:	20000180 	.word	0x20000180
 8001dd8:	20000184 	.word	0x20000184
 8001ddc:	42b40000 	.word	0x42b40000
 8001de0:	42f00000 	.word	0x42f00000

08001de4 <InitEmoteplayer>:

void InitEmoteplayer()
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
	waveEmote = LoadWaveEmote(&waveEmoteServoCount);
 8001dea:	4812      	ldr	r0, [pc, #72]	@ (8001e34 <InitEmoteplayer+0x50>)
 8001dec:	f7fe fdee 	bl	80009cc <LoadWaveEmote>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a11      	ldr	r2, [pc, #68]	@ (8001e38 <InitEmoteplayer+0x54>)
 8001df4:	6013      	str	r3, [r2, #0]
	bounceEmote = LoadBounceEmote(&bounceEmoteServoCount);
 8001df6:	4811      	ldr	r0, [pc, #68]	@ (8001e3c <InitEmoteplayer+0x58>)
 8001df8:	f7fe fc0e 	bl	8000618 <LoadBounceEmote>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4a10      	ldr	r2, [pc, #64]	@ (8001e40 <InitEmoteplayer+0x5c>)
 8001e00:	6013      	str	r3, [r2, #0]

	ServoHandle* servos[4] = {servoArmRight, servoArmLeft, servoBounceRight, servoBounceLeft};
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <InitEmoteplayer+0x60>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <InitEmoteplayer+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <InitEmoteplayer+0x68>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <InitEmoteplayer+0x6c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	617b      	str	r3, [r7, #20]

	EmotePlayerInit emotePlayerInit =
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	2304      	movs	r3, #4
 8001e22:	713b      	strb	r3, [r7, #4]
	{
		.servos = servos,
		.servoCount = 4
	};

	InitEmotePlayer(&emotePlayerInit);
 8001e24:	463b      	mov	r3, r7
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe ff4e 	bl	8000cc8 <InitEmotePlayer>

	//StartEmote(waveEmote, 4);

}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000190 	.word	0x20000190
 8001e38:	20000188 	.word	0x20000188
 8001e3c:	20000194 	.word	0x20000194
 8001e40:	2000018c 	.word	0x2000018c
 8001e44:	20000178 	.word	0x20000178
 8001e48:	2000017c 	.word	0x2000017c
 8001e4c:	20000180 	.word	0x20000180
 8001e50:	20000184 	.word	0x20000184

08001e54 <UserLoop>:

void UserLoop()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
	time1 = HAL_GetTick();
 8001e5a:	f000 f94b 	bl	80020f4 <HAL_GetTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4a51      	ldr	r2, [pc, #324]	@ (8001fa8 <UserLoop+0x154>)
 8001e62:	6013      	str	r3, [r2, #0]


	///////////Insert all loop code here/////////////////////////////

	UpdateEmotePlayer(deltatime);
 8001e64:	4b51      	ldr	r3, [pc, #324]	@ (8001fac <UserLoop+0x158>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f8c7 	bl	8000ffc <UpdateEmotePlayer>

	HAL_ADC_PollForConversion(handlers.hadc1, 1000);
 8001e6e:	4b50      	ldr	r3, [pc, #320]	@ (8001fb0 <UserLoop+0x15c>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 fa82 	bl	8002380 <HAL_ADC_PollForConversion>
	uint16_t readValue = HAL_ADC_GetValue(handlers.hadc1);
 8001e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb0 <UserLoop+0x15c>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fb08 	bl	8002496 <HAL_ADC_GetValue>
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Start(handlers.hadc1);
 8001e8a:	4b49      	ldr	r3, [pc, #292]	@ (8001fb0 <UserLoop+0x15c>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f9a4 	bl	80021dc <HAL_ADC_Start>


	if(getPlayerState() == STATE_STOPPED)
 8001e94:	f7fe ff7a 	bl	8000d8c <getPlayerState>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d158      	bne.n	8001f50 <UserLoop+0xfc>
	{
		if(readValue > 600)
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001ea4:	d918      	bls.n	8001ed8 <UserLoop+0x84>
		{
			middleReadCount = 0;
 8001ea6:	4b43      	ldr	r3, [pc, #268]	@ (8001fb4 <UserLoop+0x160>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
			farReadCount = 0;
 8001eac:	4b42      	ldr	r3, [pc, #264]	@ (8001fb8 <UserLoop+0x164>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]

			closeReadCount++;
 8001eb2:	4b42      	ldr	r3, [pc, #264]	@ (8001fbc <UserLoop+0x168>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a40      	ldr	r2, [pc, #256]	@ (8001fbc <UserLoop+0x168>)
 8001eba:	6013      	str	r3, [r2, #0]
			if(closeReadCount >= 10)
 8001ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8001fbc <UserLoop+0x168>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b09      	cmp	r3, #9
 8001ec2:	d945      	bls.n	8001f50 <UserLoop+0xfc>
			{
				doCloseEmote = true;
 8001ec4:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc0 <UserLoop+0x16c>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	701a      	strb	r2, [r3, #0]
				sensorStatus = CLOSE;
 8001eca:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc4 <UserLoop+0x170>)
 8001ecc:	2202      	movs	r2, #2
 8001ece:	701a      	strb	r2, [r3, #0]
				closeReadCount = 0;
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fbc <UserLoop+0x168>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e03b      	b.n	8001f50 <UserLoop+0xfc>
			}
		}
		else if(readValue > 150 && readValue < 600)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	2b96      	cmp	r3, #150	@ 0x96
 8001edc:	d920      	bls.n	8001f20 <UserLoop+0xcc>
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8001ee4:	d21c      	bcs.n	8001f20 <UserLoop+0xcc>
		{
			closeReadCount = 0;
 8001ee6:	4b35      	ldr	r3, [pc, #212]	@ (8001fbc <UserLoop+0x168>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
			farReadCount = 0;
 8001eec:	4b32      	ldr	r3, [pc, #200]	@ (8001fb8 <UserLoop+0x164>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

			middleReadCount++;
 8001ef2:	4b30      	ldr	r3, [pc, #192]	@ (8001fb4 <UserLoop+0x160>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb4 <UserLoop+0x160>)
 8001efa:	6013      	str	r3, [r2, #0]
			if(middleReadCount >= 10)
 8001efc:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <UserLoop+0x160>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b09      	cmp	r3, #9
 8001f02:	d925      	bls.n	8001f50 <UserLoop+0xfc>
			{
				//StartEmote(waveEmote, 4);
				if(sensorStatus == FAR)
 8001f04:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc4 <UserLoop+0x170>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <UserLoop+0xbe>
				{
					doMiddleEmote = true;
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc8 <UserLoop+0x174>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
				}

				sensorStatus = MIDDLE;
 8001f12:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc4 <UserLoop+0x170>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
				middleReadCount = 0;
 8001f18:	4b26      	ldr	r3, [pc, #152]	@ (8001fb4 <UserLoop+0x160>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
			if(middleReadCount >= 10)
 8001f1e:	e017      	b.n	8001f50 <UserLoop+0xfc>
			}
		}
		else if(readValue < 150)
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	2b95      	cmp	r3, #149	@ 0x95
 8001f24:	d814      	bhi.n	8001f50 <UserLoop+0xfc>
		{
			closeReadCount = 0;
 8001f26:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <UserLoop+0x168>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
			middleReadCount = 0;
 8001f2c:	4b21      	ldr	r3, [pc, #132]	@ (8001fb4 <UserLoop+0x160>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]

			farReadCount++;
 8001f32:	4b21      	ldr	r3, [pc, #132]	@ (8001fb8 <UserLoop+0x164>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4a1f      	ldr	r2, [pc, #124]	@ (8001fb8 <UserLoop+0x164>)
 8001f3a:	6013      	str	r3, [r2, #0]
			if(farReadCount >= 10)
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <UserLoop+0x164>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d905      	bls.n	8001f50 <UserLoop+0xfc>
			{
				sensorStatus = FAR;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <UserLoop+0x170>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
				farReadCount = 0;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <UserLoop+0x164>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if(doMiddleEmote)
 8001f50:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <UserLoop+0x174>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d009      	beq.n	8001f6c <UserLoop+0x118>
	{
		StartEmote(waveEmote, 4);
 8001f58:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <UserLoop+0x178>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe ff20 	bl	8000da4 <StartEmote>
		doMiddleEmote = false;
 8001f64:	4b18      	ldr	r3, [pc, #96]	@ (8001fc8 <UserLoop+0x174>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e006      	b.n	8001f7a <UserLoop+0x126>
	}
	else if(doCloseEmote)
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <UserLoop+0x16c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <UserLoop+0x126>
	{
		//StartEmote(bounceEmote, 4);
		doCloseEmote = false;
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <UserLoop+0x16c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
	}

	/////////////////////////////////////////////////////////////////
	HAL_Delay(10);
 8001f7a:	200a      	movs	r0, #10
 8001f7c:	f000 f8c6 	bl	800210c <HAL_Delay>
	time2 = HAL_GetTick();
 8001f80:	f000 f8b8 	bl	80020f4 <HAL_GetTick>
 8001f84:	4603      	mov	r3, r0
 8001f86:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <UserLoop+0x17c>)
 8001f88:	6013      	str	r3, [r2, #0]
	deltatime = time2 - time1;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <UserLoop+0x17c>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <UserLoop+0x154>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	4a05      	ldr	r2, [pc, #20]	@ (8001fac <UserLoop+0x158>)
 8001f96:	6013      	str	r3, [r2, #0]
	time1 = time2;
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <UserLoop+0x17c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a02      	ldr	r2, [pc, #8]	@ (8001fa8 <UserLoop+0x154>)
 8001f9e:	6013      	str	r3, [r2, #0]
	//UpdateServoPosition(servoArmLeft, deltatime);
	//UpdateEmote();
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000198 	.word	0x20000198
 8001fac:	200001a0 	.word	0x200001a0
 8001fb0:	20000168 	.word	0x20000168
 8001fb4:	200001a8 	.word	0x200001a8
 8001fb8:	200001a4 	.word	0x200001a4
 8001fbc:	200001ac 	.word	0x200001ac
 8001fc0:	200001b1 	.word	0x200001b1
 8001fc4:	20000174 	.word	0x20000174
 8001fc8:	200001b0 	.word	0x200001b0
 8001fcc:	20000188 	.word	0x20000188
 8001fd0:	2000019c 	.word	0x2000019c

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800200c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fd8:	f7ff fe34 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fdc:	480c      	ldr	r0, [pc, #48]	@ (8002010 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fde:	490d      	ldr	r1, [pc, #52]	@ (8002014 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8002018 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8002020 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002002:	f002 ff23 	bl	8004e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002006:	f7ff f89d 	bl	8001144 <main>
  bx  lr    
 800200a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800200c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002018:	08004f00 	.word	0x08004f00
  ldr r2, =_sbss
 800201c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002020:	20000300 	.word	0x20000300

08002024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC_IRQHandler>
	...

08002028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800202c:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <HAL_Init+0x40>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0d      	ldr	r2, [pc, #52]	@ (8002068 <HAL_Init+0x40>)
 8002032:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_Init+0x40>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <HAL_Init+0x40>)
 800203e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	@ (8002068 <HAL_Init+0x40>)
 800204a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002050:	2003      	movs	r0, #3
 8002052:	f000 fd0d 	bl	8002a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002056:	2000      	movs	r0, #0
 8002058:	f000 f808 	bl	800206c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800205c:	f7ff fc5e 	bl	800191c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <HAL_InitTick+0x54>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <HAL_InitTick+0x58>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 fd17 	bl	8002abe <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f000 fced 	bl	8002a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	@ (80020c8 <HAL_InitTick+0x5c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000008 	.word	0x20000008
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000008 	.word	0x20000008
 80020f0:	200001b4 	.word	0x200001b4

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	@ (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	200001b4 	.word	0x200001b4

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ffee 	bl	80020f4 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002126:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <HAL_Delay+0x44>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffde 	bl	80020f4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008

08002154 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e033      	b.n	80021d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fbfa 	bl	800196c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d118      	bne.n	80021c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002196:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800219a:	f023 0302 	bic.w	r3, r3, #2
 800219e:	f043 0202 	orr.w	r2, r3, #2
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fab4 	bl	8002714 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80021c2:	e001      	b.n	80021c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_Start+0x1a>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e0b2      	b.n	800235c <HAL_ADC_Start+0x180>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b01      	cmp	r3, #1
 800220a:	d018      	beq.n	800223e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800221c:	4b52      	ldr	r3, [pc, #328]	@ (8002368 <HAL_ADC_Start+0x18c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a52      	ldr	r2, [pc, #328]	@ (800236c <HAL_ADC_Start+0x190>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0c9a      	lsrs	r2, r3, #18
 8002228:	4613      	mov	r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	4413      	add	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002230:	e002      	b.n	8002238 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3b01      	subs	r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d17a      	bne.n	8002342 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002276:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800228a:	d106      	bne.n	800229a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002290:	f023 0206 	bic.w	r2, r3, #6
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	645a      	str	r2, [r3, #68]	@ 0x44
 8002298:	e002      	b.n	80022a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a8:	4b31      	ldr	r3, [pc, #196]	@ (8002370 <HAL_ADC_Start+0x194>)
 80022aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022b4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d12a      	bne.n	8002318 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002374 <HAL_ADC_Start+0x198>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d015      	beq.n	80022f8 <HAL_ADC_Start+0x11c>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a29      	ldr	r2, [pc, #164]	@ (8002378 <HAL_ADC_Start+0x19c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d105      	bne.n	80022e2 <HAL_ADC_Start+0x106>
 80022d6:	4b26      	ldr	r3, [pc, #152]	@ (8002370 <HAL_ADC_Start+0x194>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a25      	ldr	r2, [pc, #148]	@ (800237c <HAL_ADC_Start+0x1a0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d136      	bne.n	800235a <HAL_ADC_Start+0x17e>
 80022ec:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <HAL_ADC_Start+0x194>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0310 	and.w	r3, r3, #16
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d130      	bne.n	800235a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d129      	bne.n	800235a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	e020      	b.n	800235a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a15      	ldr	r2, [pc, #84]	@ (8002374 <HAL_ADC_Start+0x198>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d11b      	bne.n	800235a <HAL_ADC_Start+0x17e>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d114      	bne.n	800235a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	e00b      	b.n	800235a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f043 0210 	orr.w	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	20000000 	.word	0x20000000
 800236c:	431bde83 	.word	0x431bde83
 8002370:	40012300 	.word	0x40012300
 8002374:	40012000 	.word	0x40012000
 8002378:	40012100 	.word	0x40012100
 800237c:	40012200 	.word	0x40012200

08002380 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800239c:	d113      	bne.n	80023c6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ac:	d10b      	bne.n	80023c6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	f043 0220 	orr.w	r2, r3, #32
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e063      	b.n	800248e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c6:	f7ff fe95 	bl	80020f4 <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023cc:	e021      	b.n	8002412 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d01d      	beq.n	8002412 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_ADC_PollForConversion+0x6c>
 80023dc:	f7ff fe8a 	bl	80020f4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d212      	bcs.n	8002412 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d00b      	beq.n	8002412 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f043 0204 	orr.w	r2, r3, #4
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e03d      	b.n	800248e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b02      	cmp	r3, #2
 800241e:	d1d6      	bne.n	80023ce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0212 	mvn.w	r2, #18
 8002428:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d123      	bne.n	800248c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002448:	2b00      	cmp	r3, #0
 800244a:	d11f      	bne.n	800248c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002452:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002464:	2b00      	cmp	r3, #0
 8002466:	d111      	bne.n	800248c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	f043 0201 	orr.w	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1c>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e113      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x244>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	d925      	bls.n	8002528 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68d9      	ldr	r1, [r3, #12]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	3b1e      	subs	r3, #30
 80024f2:	2207      	movs	r2, #7
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43da      	mvns	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	400a      	ands	r2, r1
 8002500:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68d9      	ldr	r1, [r3, #12]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	4618      	mov	r0, r3
 8002514:	4603      	mov	r3, r0
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	4403      	add	r3, r0
 800251a:	3b1e      	subs	r3, #30
 800251c:	409a      	lsls	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	e022      	b.n	800256e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6919      	ldr	r1, [r3, #16]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	2207      	movs	r2, #7
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	400a      	ands	r2, r1
 800254a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	4603      	mov	r3, r0
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4403      	add	r3, r0
 8002564:	409a      	lsls	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b06      	cmp	r3, #6
 8002574:	d824      	bhi.n	80025c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b05      	subs	r3, #5
 8002588:	221f      	movs	r2, #31
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43da      	mvns	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	400a      	ands	r2, r1
 8002596:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	4618      	mov	r0, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	3b05      	subs	r3, #5
 80025b2:	fa00 f203 	lsl.w	r2, r0, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80025be:	e04c      	b.n	800265a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b0c      	cmp	r3, #12
 80025c6:	d824      	bhi.n	8002612 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b23      	subs	r3, #35	@ 0x23
 80025da:	221f      	movs	r2, #31
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43da      	mvns	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	400a      	ands	r2, r1
 80025e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	3b23      	subs	r3, #35	@ 0x23
 8002604:	fa00 f203 	lsl.w	r2, r0, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002610:	e023      	b.n	800265a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3b41      	subs	r3, #65	@ 0x41
 8002624:	221f      	movs	r2, #31
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	400a      	ands	r2, r1
 8002632:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	4618      	mov	r0, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3b41      	subs	r3, #65	@ 0x41
 800264e:	fa00 f203 	lsl.w	r2, r0, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800265a:	4b29      	ldr	r3, [pc, #164]	@ (8002700 <HAL_ADC_ConfigChannel+0x250>)
 800265c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a28      	ldr	r2, [pc, #160]	@ (8002704 <HAL_ADC_ConfigChannel+0x254>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10f      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x1d8>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b12      	cmp	r3, #18
 800266e:	d10b      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1d      	ldr	r2, [pc, #116]	@ (8002704 <HAL_ADC_ConfigChannel+0x254>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d12b      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x23a>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1c      	ldr	r2, [pc, #112]	@ (8002708 <HAL_ADC_ConfigChannel+0x258>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d003      	beq.n	80026a4 <HAL_ADC_ConfigChannel+0x1f4>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b11      	cmp	r3, #17
 80026a2:	d122      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <HAL_ADC_ConfigChannel+0x258>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d111      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_ADC_ConfigChannel+0x25c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a11      	ldr	r2, [pc, #68]	@ (8002710 <HAL_ADC_ConfigChannel+0x260>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	0c9a      	lsrs	r2, r3, #18
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026dc:	e002      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40012300 	.word	0x40012300
 8002704:	40012000 	.word	0x40012000
 8002708:	10000012 	.word	0x10000012
 800270c:	20000000 	.word	0x20000000
 8002710:	431bde83 	.word	0x431bde83

08002714 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800271c:	4b79      	ldr	r3, [pc, #484]	@ (8002904 <ADC_Init+0x1f0>)
 800271e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	431a      	orrs	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	021a      	lsls	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800276c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800278e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6899      	ldr	r1, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	4a58      	ldr	r2, [pc, #352]	@ (8002908 <ADC_Init+0x1f4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d022      	beq.n	80027f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80027dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6899      	ldr	r1, [r3, #8]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e00f      	b.n	8002812 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002810:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0202 	bic.w	r2, r2, #2
 8002820:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6899      	ldr	r1, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	7e1b      	ldrb	r3, [r3, #24]
 800282c:	005a      	lsls	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01b      	beq.n	8002878 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800284e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800285e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	3b01      	subs	r3, #1
 800286c:	035a      	lsls	r2, r3, #13
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	e007      	b.n	8002888 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002896:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	051a      	lsls	r2, r3, #20
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80028bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6899      	ldr	r1, [r3, #8]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ca:	025a      	lsls	r2, r3, #9
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	029a      	lsls	r2, r3, #10
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	40012300 	.word	0x40012300
 8002908:	0f000001 	.word	0x0f000001

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	@ (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db0a      	blt.n	800299a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	490c      	ldr	r1, [pc, #48]	@ (80029bc <__NVIC_SetPriority+0x4c>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	440b      	add	r3, r1
 8002994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002998:	e00a      	b.n	80029b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4908      	ldr	r1, [pc, #32]	@ (80029c0 <__NVIC_SetPriority+0x50>)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3b04      	subs	r3, #4
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	440b      	add	r3, r1
 80029ae:	761a      	strb	r2, [r3, #24]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000e100 	.word	0xe000e100
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	@ 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f1c3 0307 	rsb	r3, r3, #7
 80029de:	2b04      	cmp	r3, #4
 80029e0:	bf28      	it	cs
 80029e2:	2304      	movcs	r3, #4
 80029e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d902      	bls.n	80029f4 <NVIC_EncodePriority+0x30>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3b03      	subs	r3, #3
 80029f2:	e000      	b.n	80029f6 <NVIC_EncodePriority+0x32>
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	401a      	ands	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	4313      	orrs	r3, r2
         );
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3724      	adds	r7, #36	@ 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a3c:	d301      	bcc.n	8002a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00f      	b.n	8002a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a42:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <SysTick_Config+0x40>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f7ff ff8e 	bl	8002970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <SysTick_Config+0x40>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5a:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <SysTick_Config+0x40>)
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	e000e010 	.word	0xe000e010

08002a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff47 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a98:	f7ff ff5c 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7ff ff8e 	bl	80029c4 <NVIC_EncodePriority>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff5d 	bl	8002970 <__NVIC_SetPriority>
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffb0 	bl	8002a2c <SysTick_Config>
 8002acc:	4603      	mov	r3, r0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	@ 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	e165      	b.n	8002dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	f040 8154 	bne.w	8002dba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d130      	bne.n	8002b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b60:	2201      	movs	r2, #1
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	091b      	lsrs	r3, r3, #4
 8002b76:	f003 0201 	and.w	r2, r3, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d017      	beq.n	8002bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	2203      	movs	r2, #3
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d123      	bne.n	8002c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	08da      	lsrs	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3208      	adds	r2, #8
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0203 	and.w	r2, r3, #3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80ae 	beq.w	8002dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b5d      	ldr	r3, [pc, #372]	@ (8002dd8 <HAL_GPIO_Init+0x300>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	4a5c      	ldr	r2, [pc, #368]	@ (8002dd8 <HAL_GPIO_Init+0x300>)
 8002c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd8 <HAL_GPIO_Init+0x300>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c7a:	4a58      	ldr	r2, [pc, #352]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	220f      	movs	r2, #15
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	@ (8002de0 <HAL_GPIO_Init+0x308>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d025      	beq.n	8002cf2 <HAL_GPIO_Init+0x21a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8002de4 <HAL_GPIO_Init+0x30c>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01f      	beq.n	8002cee <HAL_GPIO_Init+0x216>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a4d      	ldr	r2, [pc, #308]	@ (8002de8 <HAL_GPIO_Init+0x310>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x212>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8002dec <HAL_GPIO_Init+0x314>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x20e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8002df0 <HAL_GPIO_Init+0x318>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x20a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8002df4 <HAL_GPIO_Init+0x31c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x206>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a49      	ldr	r2, [pc, #292]	@ (8002df8 <HAL_GPIO_Init+0x320>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x202>
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	e00c      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e00a      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cde:	2305      	movs	r3, #5
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x21c>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4935      	ldr	r1, [pc, #212]	@ (8002ddc <HAL_GPIO_Init+0x304>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d12:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d36:	4a31      	ldr	r2, [pc, #196]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d60:	4a26      	ldr	r2, [pc, #152]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d66:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d90:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db4:	4a11      	ldr	r2, [pc, #68]	@ (8002dfc <HAL_GPIO_Init+0x324>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f ae96 	bls.w	8002af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3724      	adds	r7, #36	@ 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40021400 	.word	0x40021400
 8002df8:	40021800 	.word	0x40021800
 8002dfc:	40013c00 	.word	0x40013c00

08002e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	807b      	strh	r3, [r7, #2]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e10:	787b      	ldrb	r3, [r7, #1]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e16:	887a      	ldrh	r2, [r7, #2]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e1c:	e003      	b.n	8002e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1e:	887b      	ldrh	r3, [r7, #2]
 8002e20:	041a      	lsls	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	619a      	str	r2, [r3, #24]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0cc      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b68      	ldr	r3, [pc, #416]	@ (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d90c      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b65      	ldr	r3, [pc, #404]	@ (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b63      	ldr	r3, [pc, #396]	@ (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b8      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e88:	4b59      	ldr	r3, [pc, #356]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea0:	4b53      	ldr	r3, [pc, #332]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b50      	ldr	r3, [pc, #320]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	494d      	ldr	r1, [pc, #308]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d044      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b47      	ldr	r3, [pc, #284]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d119      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e07f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e06f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e067      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b37      	ldr	r3, [pc, #220]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4934      	ldr	r1, [pc, #208]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f24:	f7ff f8e6 	bl	80020f4 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7ff f8e2 	bl	80020f4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e04f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2b      	ldr	r3, [pc, #172]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b25      	ldr	r3, [pc, #148]	@ (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d20c      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b22      	ldr	r3, [pc, #136]	@ (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	@ (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e032      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4916      	ldr	r1, [pc, #88]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa6:	4b12      	ldr	r3, [pc, #72]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	490e      	ldr	r1, [pc, #56]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fba:	f000 f855 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	490a      	ldr	r1, [pc, #40]	@ (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	5ccb      	ldrb	r3, [r1, r3]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a09      	ldr	r2, [pc, #36]	@ (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fd6:	4b09      	ldr	r3, [pc, #36]	@ (8002ffc <HAL_RCC_ClockConfig+0x1c8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f846 	bl	800206c <HAL_InitTick>

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023c00 	.word	0x40023c00
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	08004ed8 	.word	0x08004ed8
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <HAL_RCC_GetHCLKFreq+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000000 	.word	0x20000000

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800301c:	f7ff fff0 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	@ (8003038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0a9b      	lsrs	r3, r3, #10
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	@ (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	08004ee8 	.word	0x08004ee8

08003040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003044:	f7ff ffdc 	bl	8003000 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0b5b      	lsrs	r3, r3, #13
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	@ (8003064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40023800 	.word	0x40023800
 8003064:	08004ee8 	.word	0x08004ee8

08003068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800306c:	b0ae      	sub	sp, #184	@ 0xb8
 800306e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308e:	4bcb      	ldr	r3, [pc, #812]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b0c      	cmp	r3, #12
 8003098:	f200 8206 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x440>
 800309c:	a201      	add	r2, pc, #4	@ (adr r2, 80030a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030d9 	.word	0x080030d9
 80030a8:	080034a9 	.word	0x080034a9
 80030ac:	080034a9 	.word	0x080034a9
 80030b0:	080034a9 	.word	0x080034a9
 80030b4:	080030e1 	.word	0x080030e1
 80030b8:	080034a9 	.word	0x080034a9
 80030bc:	080034a9 	.word	0x080034a9
 80030c0:	080034a9 	.word	0x080034a9
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	080034a9 	.word	0x080034a9
 80030cc:	080034a9 	.word	0x080034a9
 80030d0:	080034a9 	.word	0x080034a9
 80030d4:	080032d9 	.word	0x080032d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4bb9      	ldr	r3, [pc, #740]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80030da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030de:	e1e7      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030e0:	4bb8      	ldr	r3, [pc, #736]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80030e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030e6:	e1e3      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e8:	4bb4      	ldr	r3, [pc, #720]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030f4:	4bb1      	ldr	r3, [pc, #708]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d071      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003100:	4bae      	ldr	r3, [pc, #696]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	2200      	movs	r2, #0
 8003108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800310c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800311c:	2300      	movs	r3, #0
 800311e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003122:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003126:	4622      	mov	r2, r4
 8003128:	462b      	mov	r3, r5
 800312a:	f04f 0000 	mov.w	r0, #0
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	0159      	lsls	r1, r3, #5
 8003134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003138:	0150      	lsls	r0, r2, #5
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4621      	mov	r1, r4
 8003140:	1a51      	subs	r1, r2, r1
 8003142:	6439      	str	r1, [r7, #64]	@ 0x40
 8003144:	4629      	mov	r1, r5
 8003146:	eb63 0301 	sbc.w	r3, r3, r1
 800314a:	647b      	str	r3, [r7, #68]	@ 0x44
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003158:	4649      	mov	r1, r9
 800315a:	018b      	lsls	r3, r1, #6
 800315c:	4641      	mov	r1, r8
 800315e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003162:	4641      	mov	r1, r8
 8003164:	018a      	lsls	r2, r1, #6
 8003166:	4641      	mov	r1, r8
 8003168:	1a51      	subs	r1, r2, r1
 800316a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800316c:	4649      	mov	r1, r9
 800316e:	eb63 0301 	sbc.w	r3, r3, r1
 8003172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003180:	4649      	mov	r1, r9
 8003182:	00cb      	lsls	r3, r1, #3
 8003184:	4641      	mov	r1, r8
 8003186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800318a:	4641      	mov	r1, r8
 800318c:	00ca      	lsls	r2, r1, #3
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	4603      	mov	r3, r0
 8003194:	4622      	mov	r2, r4
 8003196:	189b      	adds	r3, r3, r2
 8003198:	633b      	str	r3, [r7, #48]	@ 0x30
 800319a:	462b      	mov	r3, r5
 800319c:	460a      	mov	r2, r1
 800319e:	eb42 0303 	adc.w	r3, r2, r3
 80031a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031b0:	4629      	mov	r1, r5
 80031b2:	024b      	lsls	r3, r1, #9
 80031b4:	4621      	mov	r1, r4
 80031b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ba:	4621      	mov	r1, r4
 80031bc:	024a      	lsls	r2, r1, #9
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80031d4:	f7fd f816 	bl	8000204 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031e2:	e067      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e4:	4b75      	ldr	r3, [pc, #468]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80031f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031fe:	2300      	movs	r3, #0
 8003200:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003202:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	f04f 0000 	mov.w	r0, #0
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	0159      	lsls	r1, r3, #5
 8003214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003218:	0150      	lsls	r0, r2, #5
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4621      	mov	r1, r4
 8003220:	1a51      	subs	r1, r2, r1
 8003222:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003224:	4629      	mov	r1, r5
 8003226:	eb63 0301 	sbc.w	r3, r3, r1
 800322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003238:	4649      	mov	r1, r9
 800323a:	018b      	lsls	r3, r1, #6
 800323c:	4641      	mov	r1, r8
 800323e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003242:	4641      	mov	r1, r8
 8003244:	018a      	lsls	r2, r1, #6
 8003246:	4641      	mov	r1, r8
 8003248:	ebb2 0a01 	subs.w	sl, r2, r1
 800324c:	4649      	mov	r1, r9
 800324e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800325e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003262:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003266:	4692      	mov	sl, r2
 8003268:	469b      	mov	fp, r3
 800326a:	4623      	mov	r3, r4
 800326c:	eb1a 0303 	adds.w	r3, sl, r3
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	462b      	mov	r3, r5
 8003274:	eb4b 0303 	adc.w	r3, fp, r3
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003286:	4629      	mov	r1, r5
 8003288:	028b      	lsls	r3, r1, #10
 800328a:	4621      	mov	r1, r4
 800328c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003290:	4621      	mov	r1, r4
 8003292:	028a      	lsls	r2, r1, #10
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800329c:	2200      	movs	r2, #0
 800329e:	673b      	str	r3, [r7, #112]	@ 0x70
 80032a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80032a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80032a6:	f7fc ffad 	bl	8000204 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4613      	mov	r3, r2
 80032b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032b4:	4b41      	ldr	r3, [pc, #260]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80032c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032d6:	e0eb      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d8:	4b38      	ldr	r3, [pc, #224]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e4:	4b35      	ldr	r3, [pc, #212]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d06b      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f0:	4b32      	ldr	r3, [pc, #200]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x354>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	2200      	movs	r2, #0
 80032f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003302:	663b      	str	r3, [r7, #96]	@ 0x60
 8003304:	2300      	movs	r3, #0
 8003306:	667b      	str	r3, [r7, #100]	@ 0x64
 8003308:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800330c:	4622      	mov	r2, r4
 800330e:	462b      	mov	r3, r5
 8003310:	f04f 0000 	mov.w	r0, #0
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	0159      	lsls	r1, r3, #5
 800331a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800331e:	0150      	lsls	r0, r2, #5
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4621      	mov	r1, r4
 8003326:	1a51      	subs	r1, r2, r1
 8003328:	61b9      	str	r1, [r7, #24]
 800332a:	4629      	mov	r1, r5
 800332c:	eb63 0301 	sbc.w	r3, r3, r1
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800333e:	4659      	mov	r1, fp
 8003340:	018b      	lsls	r3, r1, #6
 8003342:	4651      	mov	r1, sl
 8003344:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003348:	4651      	mov	r1, sl
 800334a:	018a      	lsls	r2, r1, #6
 800334c:	4651      	mov	r1, sl
 800334e:	ebb2 0801 	subs.w	r8, r2, r1
 8003352:	4659      	mov	r1, fp
 8003354:	eb63 0901 	sbc.w	r9, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003364:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003368:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800336c:	4690      	mov	r8, r2
 800336e:	4699      	mov	r9, r3
 8003370:	4623      	mov	r3, r4
 8003372:	eb18 0303 	adds.w	r3, r8, r3
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	462b      	mov	r3, r5
 800337a:	eb49 0303 	adc.w	r3, r9, r3
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800338c:	4629      	mov	r1, r5
 800338e:	024b      	lsls	r3, r1, #9
 8003390:	4621      	mov	r1, r4
 8003392:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003396:	4621      	mov	r1, r4
 8003398:	024a      	lsls	r2, r1, #9
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033a2:	2200      	movs	r2, #0
 80033a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80033a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033ac:	f7fc ff2a 	bl	8000204 <__aeabi_uldivmod>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4613      	mov	r3, r2
 80033b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033ba:	e065      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x420>
 80033bc:	40023800 	.word	0x40023800
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c8:	4b3d      	ldr	r3, [pc, #244]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	2200      	movs	r2, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	4611      	mov	r1, r2
 80033d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80033da:	2300      	movs	r3, #0
 80033dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80033de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80033e2:	4642      	mov	r2, r8
 80033e4:	464b      	mov	r3, r9
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	0159      	lsls	r1, r3, #5
 80033f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033f4:	0150      	lsls	r0, r2, #5
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4641      	mov	r1, r8
 80033fc:	1a51      	subs	r1, r2, r1
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	4649      	mov	r1, r9
 8003402:	eb63 0301 	sbc.w	r3, r3, r1
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003414:	4659      	mov	r1, fp
 8003416:	018b      	lsls	r3, r1, #6
 8003418:	4651      	mov	r1, sl
 800341a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800341e:	4651      	mov	r1, sl
 8003420:	018a      	lsls	r2, r1, #6
 8003422:	4651      	mov	r1, sl
 8003424:	1a54      	subs	r4, r2, r1
 8003426:	4659      	mov	r1, fp
 8003428:	eb63 0501 	sbc.w	r5, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	00eb      	lsls	r3, r5, #3
 8003436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343a:	00e2      	lsls	r2, r4, #3
 800343c:	4614      	mov	r4, r2
 800343e:	461d      	mov	r5, r3
 8003440:	4643      	mov	r3, r8
 8003442:	18e3      	adds	r3, r4, r3
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	464b      	mov	r3, r9
 8003448:	eb45 0303 	adc.w	r3, r5, r3
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800345a:	4629      	mov	r1, r5
 800345c:	028b      	lsls	r3, r1, #10
 800345e:	4621      	mov	r1, r4
 8003460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003464:	4621      	mov	r1, r4
 8003466:	028a      	lsls	r2, r1, #10
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003470:	2200      	movs	r2, #0
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003474:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003476:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800347a:	f7fc fec3 	bl	8000204 <__aeabi_uldivmod>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4613      	mov	r3, r2
 8003484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003488:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0f1b      	lsrs	r3, r3, #28
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800349a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034a6:	e003      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80034aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	37b8      	adds	r7, #184	@ 0xb8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	00f42400 	.word	0x00f42400

080034c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e28d      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8083 	beq.w	80035ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034e8:	4b94      	ldr	r3, [pc, #592]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d019      	beq.n	8003528 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80034f4:	4b91      	ldr	r3, [pc, #580]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d106      	bne.n	800350e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003500:	4b8e      	ldr	r3, [pc, #568]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800350c:	d00c      	beq.n	8003528 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800350e:	4b8b      	ldr	r3, [pc, #556]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003516:	2b0c      	cmp	r3, #12
 8003518:	d112      	bne.n	8003540 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b88      	ldr	r3, [pc, #544]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003526:	d10b      	bne.n	8003540 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003528:	4b84      	ldr	r3, [pc, #528]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d05b      	beq.n	80035ec <HAL_RCC_OscConfig+0x124>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d157      	bne.n	80035ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e25a      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003548:	d106      	bne.n	8003558 <HAL_RCC_OscConfig+0x90>
 800354a:	4b7c      	ldr	r3, [pc, #496]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7b      	ldr	r2, [pc, #492]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xcc>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0xb4>
 8003562:	4b76      	ldr	r3, [pc, #472]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a75      	ldr	r2, [pc, #468]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b73      	ldr	r3, [pc, #460]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a72      	ldr	r2, [pc, #456]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xcc>
 800357c:	4b6f      	ldr	r3, [pc, #444]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6e      	ldr	r2, [pc, #440]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b6c      	ldr	r3, [pc, #432]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6b      	ldr	r2, [pc, #428]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe fdaa 	bl	80020f4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe fda6 	bl	80020f4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	@ 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e21f      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b61      	ldr	r3, [pc, #388]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xdc>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fd96 	bl	80020f4 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe fd92 	bl	80020f4 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	@ 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e20b      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b57      	ldr	r3, [pc, #348]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x104>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d06f      	beq.n	80036da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035fa:	4b50      	ldr	r3, [pc, #320]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d017      	beq.n	8003636 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003606:	4b4d      	ldr	r3, [pc, #308]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
        || \
 800360e:	2b08      	cmp	r3, #8
 8003610:	d105      	bne.n	800361e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003612:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361e:	4b47      	ldr	r3, [pc, #284]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d11c      	bne.n	8003664 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362a:	4b44      	ldr	r3, [pc, #272]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d116      	bne.n	8003664 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	4b41      	ldr	r3, [pc, #260]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_RCC_OscConfig+0x186>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d001      	beq.n	800364e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e1d3      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364e:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4937      	ldr	r1, [pc, #220]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	e03a      	b.n	80036da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366c:	4b34      	ldr	r3, [pc, #208]	@ (8003740 <HAL_RCC_OscConfig+0x278>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fe fd3f 	bl	80020f4 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367a:	f7fe fd3b 	bl	80020f4 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e1b4      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	4b2b      	ldr	r3, [pc, #172]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b28      	ldr	r3, [pc, #160]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4925      	ldr	r1, [pc, #148]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]
 80036ac:	e015      	b.n	80036da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ae:	4b24      	ldr	r3, [pc, #144]	@ (8003740 <HAL_RCC_OscConfig+0x278>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe fd1e 	bl	80020f4 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036bc:	f7fe fd1a 	bl	80020f4 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e193      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d036      	beq.n	8003754 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ee:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fe fcfe 	bl	80020f4 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fe fcfa 	bl	80020f4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e173      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_RCC_OscConfig+0x274>)
 8003710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x234>
 800371a:	e01b      	b.n	8003754 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371c:	4b09      	ldr	r3, [pc, #36]	@ (8003744 <HAL_RCC_OscConfig+0x27c>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fe fce7 	bl	80020f4 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	e00e      	b.n	8003748 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372a:	f7fe fce3 	bl	80020f4 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d907      	bls.n	8003748 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e15c      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
 800373c:	40023800 	.word	0x40023800
 8003740:	42470000 	.word	0x42470000
 8003744:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	4b8a      	ldr	r3, [pc, #552]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800374a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ea      	bne.n	800372a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8097 	beq.w	8003890 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b83      	ldr	r3, [pc, #524]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	4b7f      	ldr	r3, [pc, #508]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	4a7e      	ldr	r2, [pc, #504]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800377c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003780:	6413      	str	r3, [r2, #64]	@ 0x40
 8003782:	4b7c      	ldr	r3, [pc, #496]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003792:	4b79      	ldr	r3, [pc, #484]	@ (8003978 <HAL_RCC_OscConfig+0x4b0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d118      	bne.n	80037d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379e:	4b76      	ldr	r3, [pc, #472]	@ (8003978 <HAL_RCC_OscConfig+0x4b0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	@ (8003978 <HAL_RCC_OscConfig+0x4b0>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037aa:	f7fe fca3 	bl	80020f4 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b2:	f7fe fc9f 	bl	80020f4 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e118      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003978 <HAL_RCC_OscConfig+0x4b0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x31e>
 80037d8:	4b66      	ldr	r3, [pc, #408]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a65      	ldr	r2, [pc, #404]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e4:	e01c      	b.n	8003820 <HAL_RCC_OscConfig+0x358>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x340>
 80037ee:	4b61      	ldr	r3, [pc, #388]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f2:	4a60      	ldr	r2, [pc, #384]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fe:	4a5d      	ldr	r2, [pc, #372]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6713      	str	r3, [r2, #112]	@ 0x70
 8003806:	e00b      	b.n	8003820 <HAL_RCC_OscConfig+0x358>
 8003808:	4b5a      	ldr	r3, [pc, #360]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380c:	4a59      	ldr	r2, [pc, #356]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	@ 0x70
 8003814:	4b57      	ldr	r3, [pc, #348]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	4a56      	ldr	r2, [pc, #344]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800381a:	f023 0304 	bic.w	r3, r3, #4
 800381e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d015      	beq.n	8003854 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fe fc64 	bl	80020f4 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	e00a      	b.n	8003846 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fe fc60 	bl	80020f4 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e0d7      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	4b4b      	ldr	r3, [pc, #300]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ee      	beq.n	8003830 <HAL_RCC_OscConfig+0x368>
 8003852:	e014      	b.n	800387e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fe fc4e 	bl	80020f4 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fe fc4a 	bl	80020f4 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0c1      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003872:	4b40      	ldr	r3, [pc, #256]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1ee      	bne.n	800385c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003884:	4b3b      	ldr	r3, [pc, #236]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	4a3a      	ldr	r2, [pc, #232]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800388a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800388e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80ad 	beq.w	80039f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800389a:	4b36      	ldr	r3, [pc, #216]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d060      	beq.n	8003968 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d145      	bne.n	800393a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b33      	ldr	r3, [pc, #204]	@ (800397c <HAL_RCC_OscConfig+0x4b4>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fe fc1e 	bl	80020f4 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe fc1a 	bl	80020f4 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e093      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	4b29      	ldr	r3, [pc, #164]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	071b      	lsls	r3, r3, #28
 8003906:	491b      	ldr	r1, [pc, #108]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800390c:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <HAL_RCC_OscConfig+0x4b4>)
 800390e:	2201      	movs	r2, #1
 8003910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fe fbef 	bl	80020f4 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391a:	f7fe fbeb 	bl	80020f4 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e064      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x452>
 8003938:	e05c      	b.n	80039f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393a:	4b10      	ldr	r3, [pc, #64]	@ (800397c <HAL_RCC_OscConfig+0x4b4>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe fbd8 	bl	80020f4 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fbd4 	bl	80020f4 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e04d      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x480>
 8003966:	e045      	b.n	80039f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e040      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
 8003974:	40023800 	.word	0x40023800
 8003978:	40007000 	.word	0x40007000
 800397c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003980:	4b1f      	ldr	r3, [pc, #124]	@ (8003a00 <HAL_RCC_OscConfig+0x538>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d030      	beq.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d129      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d122      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d119      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	3b01      	subs	r3, #1
 80039ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d10f      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800

08003a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e041      	b.n	8003a9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd ffe2 	bl	80019f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 fad8 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e041      	b.n	8003b38 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d106      	bne.n	8003ace <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f839 	bl	8003b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f000 fa89 	bl	8003ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d109      	bne.n	8003b78 <HAL_TIM_PWM_Start+0x24>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	bf14      	ite	ne
 8003b70:	2301      	movne	r3, #1
 8003b72:	2300      	moveq	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e022      	b.n	8003bbe <HAL_TIM_PWM_Start+0x6a>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d109      	bne.n	8003b92 <HAL_TIM_PWM_Start+0x3e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	bf14      	ite	ne
 8003b8a:	2301      	movne	r3, #1
 8003b8c:	2300      	moveq	r3, #0
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	e015      	b.n	8003bbe <HAL_TIM_PWM_Start+0x6a>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d109      	bne.n	8003bac <HAL_TIM_PWM_Start+0x58>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	bf14      	ite	ne
 8003ba4:	2301      	movne	r3, #1
 8003ba6:	2300      	moveq	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	e008      	b.n	8003bbe <HAL_TIM_PWM_Start+0x6a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e07c      	b.n	8003cc0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d104      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x82>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bd4:	e013      	b.n	8003bfe <HAL_TIM_PWM_Start+0xaa>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d104      	bne.n	8003be6 <HAL_TIM_PWM_Start+0x92>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003be4:	e00b      	b.n	8003bfe <HAL_TIM_PWM_Start+0xaa>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d104      	bne.n	8003bf6 <HAL_TIM_PWM_Start+0xa2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bf4:	e003      	b.n	8003bfe <HAL_TIM_PWM_Start+0xaa>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2201      	movs	r2, #1
 8003c04:	6839      	ldr	r1, [r7, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fce6 	bl	80045d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc8 <HAL_TIM_PWM_Start+0x174>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_TIM_PWM_Start+0xcc>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ccc <HAL_TIM_PWM_Start+0x178>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIM_PWM_Start+0xd0>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <HAL_TIM_PWM_Start+0xd2>
 8003c24:	2300      	movs	r3, #0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a22      	ldr	r2, [pc, #136]	@ (8003cc8 <HAL_TIM_PWM_Start+0x174>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_TIM_PWM_Start+0x136>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4c:	d01d      	beq.n	8003c8a <HAL_TIM_PWM_Start+0x136>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd0 <HAL_TIM_PWM_Start+0x17c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_TIM_PWM_Start+0x136>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003cd4 <HAL_TIM_PWM_Start+0x180>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_TIM_PWM_Start+0x136>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd8 <HAL_TIM_PWM_Start+0x184>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIM_PWM_Start+0x136>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a16      	ldr	r2, [pc, #88]	@ (8003ccc <HAL_TIM_PWM_Start+0x178>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_TIM_PWM_Start+0x136>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a18      	ldr	r2, [pc, #96]	@ (8003cdc <HAL_TIM_PWM_Start+0x188>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIM_PWM_Start+0x136>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a16      	ldr	r2, [pc, #88]	@ (8003ce0 <HAL_TIM_PWM_Start+0x18c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d111      	bne.n	8003cae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b06      	cmp	r3, #6
 8003c9a:	d010      	beq.n	8003cbe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cac:	e007      	b.n	8003cbe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f042 0201 	orr.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40010400 	.word	0x40010400
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40001800 	.word	0x40001800

08003ce4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e0ae      	b.n	8003e60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	f200 809f 	bhi.w	8003e50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d12:	a201      	add	r2, pc, #4	@ (adr r2, 8003d18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003e51 	.word	0x08003e51
 8003d20:	08003e51 	.word	0x08003e51
 8003d24:	08003e51 	.word	0x08003e51
 8003d28:	08003d8d 	.word	0x08003d8d
 8003d2c:	08003e51 	.word	0x08003e51
 8003d30:	08003e51 	.word	0x08003e51
 8003d34:	08003e51 	.word	0x08003e51
 8003d38:	08003dcf 	.word	0x08003dcf
 8003d3c:	08003e51 	.word	0x08003e51
 8003d40:	08003e51 	.word	0x08003e51
 8003d44:	08003e51 	.word	0x08003e51
 8003d48:	08003e0f 	.word	0x08003e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 f9f6 	bl	8004144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0208 	orr.w	r2, r2, #8
 8003d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0204 	bic.w	r2, r2, #4
 8003d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6999      	ldr	r1, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	619a      	str	r2, [r3, #24]
      break;
 8003d8a:	e064      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fa46 	bl	8004224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6999      	ldr	r1, [r3, #24]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	619a      	str	r2, [r3, #24]
      break;
 8003dcc:	e043      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fa9b 	bl	8004310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0208 	orr.w	r2, r2, #8
 8003de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0204 	bic.w	r2, r2, #4
 8003df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69d9      	ldr	r1, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
      break;
 8003e0c:	e023      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 faef 	bl	80043f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69d9      	ldr	r1, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	61da      	str	r2, [r3, #28]
      break;
 8003e4e:	e002      	b.n	8003e56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	75fb      	strb	r3, [r7, #23]
      break;
 8003e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIM_ConfigClockSource+0x1c>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0b4      	b.n	8003fee <HAL_TIM_ConfigClockSource+0x186>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ebc:	d03e      	beq.n	8003f3c <HAL_TIM_ConfigClockSource+0xd4>
 8003ebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec2:	f200 8087 	bhi.w	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eca:	f000 8086 	beq.w	8003fda <HAL_TIM_ConfigClockSource+0x172>
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed2:	d87f      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b70      	cmp	r3, #112	@ 0x70
 8003ed6:	d01a      	beq.n	8003f0e <HAL_TIM_ConfigClockSource+0xa6>
 8003ed8:	2b70      	cmp	r3, #112	@ 0x70
 8003eda:	d87b      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b60      	cmp	r3, #96	@ 0x60
 8003ede:	d050      	beq.n	8003f82 <HAL_TIM_ConfigClockSource+0x11a>
 8003ee0:	2b60      	cmp	r3, #96	@ 0x60
 8003ee2:	d877      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee4:	2b50      	cmp	r3, #80	@ 0x50
 8003ee6:	d03c      	beq.n	8003f62 <HAL_TIM_ConfigClockSource+0xfa>
 8003ee8:	2b50      	cmp	r3, #80	@ 0x50
 8003eea:	d873      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eec:	2b40      	cmp	r3, #64	@ 0x40
 8003eee:	d058      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x13a>
 8003ef0:	2b40      	cmp	r3, #64	@ 0x40
 8003ef2:	d86f      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b30      	cmp	r3, #48	@ 0x30
 8003ef6:	d064      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003ef8:	2b30      	cmp	r3, #48	@ 0x30
 8003efa:	d86b      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d060      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d867      	bhi.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05c      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d05a      	beq.n	8003fc2 <HAL_TIM_ConfigClockSource+0x15a>
 8003f0c:	e062      	b.n	8003fd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f1e:	f000 fb3b 	bl	8004598 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	609a      	str	r2, [r3, #8]
      break;
 8003f3a:	e04f      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f4c:	f000 fb24 	bl	8004598 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f5e:	609a      	str	r2, [r3, #8]
      break;
 8003f60:	e03c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f000 fa98 	bl	80044a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2150      	movs	r1, #80	@ 0x50
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 faf1 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003f80:	e02c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f000 fab7 	bl	8004502 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2160      	movs	r1, #96	@ 0x60
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fae1 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003fa0:	e01c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fae:	461a      	mov	r2, r3
 8003fb0:	f000 fa78 	bl	80044a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2140      	movs	r1, #64	@ 0x40
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fad1 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003fc0:	e00c      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f000 fac8 	bl	8004562 <TIM_ITRx_SetConfig>
      break;
 8003fd2:	e003      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd8:	e000      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a43      	ldr	r2, [pc, #268]	@ (8004118 <TIM_Base_SetConfig+0x120>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004016:	d00f      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a40      	ldr	r2, [pc, #256]	@ (800411c <TIM_Base_SetConfig+0x124>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00b      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3f      	ldr	r2, [pc, #252]	@ (8004120 <TIM_Base_SetConfig+0x128>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d007      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3e      	ldr	r2, [pc, #248]	@ (8004124 <TIM_Base_SetConfig+0x12c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a3d      	ldr	r2, [pc, #244]	@ (8004128 <TIM_Base_SetConfig+0x130>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d108      	bne.n	800404a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800403e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a32      	ldr	r2, [pc, #200]	@ (8004118 <TIM_Base_SetConfig+0x120>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02b      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004058:	d027      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2f      	ldr	r2, [pc, #188]	@ (800411c <TIM_Base_SetConfig+0x124>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d023      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2e      	ldr	r2, [pc, #184]	@ (8004120 <TIM_Base_SetConfig+0x128>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01f      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a2d      	ldr	r2, [pc, #180]	@ (8004124 <TIM_Base_SetConfig+0x12c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01b      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a2c      	ldr	r2, [pc, #176]	@ (8004128 <TIM_Base_SetConfig+0x130>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d017      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2b      	ldr	r2, [pc, #172]	@ (800412c <TIM_Base_SetConfig+0x134>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2a      	ldr	r2, [pc, #168]	@ (8004130 <TIM_Base_SetConfig+0x138>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00f      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a29      	ldr	r2, [pc, #164]	@ (8004134 <TIM_Base_SetConfig+0x13c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00b      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a28      	ldr	r2, [pc, #160]	@ (8004138 <TIM_Base_SetConfig+0x140>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d007      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a27      	ldr	r2, [pc, #156]	@ (800413c <TIM_Base_SetConfig+0x144>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <TIM_Base_SetConfig+0x148>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004118 <TIM_Base_SetConfig+0x120>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_Base_SetConfig+0xf2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a10      	ldr	r2, [pc, #64]	@ (8004128 <TIM_Base_SetConfig+0x130>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d103      	bne.n	80040f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f043 0204 	orr.w	r2, r3, #4
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	601a      	str	r2, [r3, #0]
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40010000 	.word	0x40010000
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800
 8004124:	40000c00 	.word	0x40000c00
 8004128:	40010400 	.word	0x40010400
 800412c:	40014000 	.word	0x40014000
 8004130:	40014400 	.word	0x40014400
 8004134:	40014800 	.word	0x40014800
 8004138:	40001800 	.word	0x40001800
 800413c:	40001c00 	.word	0x40001c00
 8004140:	40002000 	.word	0x40002000

08004144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	f023 0201 	bic.w	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 0302 	bic.w	r3, r3, #2
 800418c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a20      	ldr	r2, [pc, #128]	@ (800421c <TIM_OC1_SetConfig+0xd8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_OC1_SetConfig+0x64>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004220 <TIM_OC1_SetConfig+0xdc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d10c      	bne.n	80041c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f023 0308 	bic.w	r3, r3, #8
 80041ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f023 0304 	bic.w	r3, r3, #4
 80041c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a15      	ldr	r2, [pc, #84]	@ (800421c <TIM_OC1_SetConfig+0xd8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_OC1_SetConfig+0x8e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a14      	ldr	r2, [pc, #80]	@ (8004220 <TIM_OC1_SetConfig+0xdc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d111      	bne.n	80041f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	621a      	str	r2, [r3, #32]
}
 8004210:	bf00      	nop
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	40010000 	.word	0x40010000
 8004220:	40010400 	.word	0x40010400

08004224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a1b      	ldr	r3, [r3, #32]
 8004232:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	f023 0210 	bic.w	r2, r3, #16
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800425a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0320 	bic.w	r3, r3, #32
 800426e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a22      	ldr	r2, [pc, #136]	@ (8004308 <TIM_OC2_SetConfig+0xe4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_OC2_SetConfig+0x68>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a21      	ldr	r2, [pc, #132]	@ (800430c <TIM_OC2_SetConfig+0xe8>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d10d      	bne.n	80042a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	011b      	lsls	r3, r3, #4
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a17      	ldr	r2, [pc, #92]	@ (8004308 <TIM_OC2_SetConfig+0xe4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d003      	beq.n	80042b8 <TIM_OC2_SetConfig+0x94>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a16      	ldr	r2, [pc, #88]	@ (800430c <TIM_OC2_SetConfig+0xe8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d113      	bne.n	80042e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010000 	.word	0x40010000
 800430c:	40010400 	.word	0x40010400

08004310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f023 0303 	bic.w	r3, r3, #3
 8004346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4313      	orrs	r3, r2
 8004350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	021b      	lsls	r3, r3, #8
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <TIM_OC3_SetConfig+0xe0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d003      	beq.n	8004376 <TIM_OC3_SetConfig+0x66>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a20      	ldr	r2, [pc, #128]	@ (80043f4 <TIM_OC3_SetConfig+0xe4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10d      	bne.n	8004392 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800437c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a16      	ldr	r2, [pc, #88]	@ (80043f0 <TIM_OC3_SetConfig+0xe0>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_OC3_SetConfig+0x92>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <TIM_OC3_SetConfig+0xe4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d113      	bne.n	80043ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	621a      	str	r2, [r3, #32]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40010400 	.word	0x40010400

080043f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	031b      	lsls	r3, r3, #12
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a12      	ldr	r2, [pc, #72]	@ (800449c <TIM_OC4_SetConfig+0xa4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d003      	beq.n	8004460 <TIM_OC4_SetConfig+0x68>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a11      	ldr	r2, [pc, #68]	@ (80044a0 <TIM_OC4_SetConfig+0xa8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d109      	bne.n	8004474 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40010000 	.word	0x40010000
 80044a0:	40010400 	.word	0x40010400

080044a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f023 0201 	bic.w	r2, r3, #1
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f023 030a 	bic.w	r3, r3, #10
 80044e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	621a      	str	r2, [r3, #32]
}
 80044f6:	bf00      	nop
 80044f8:	371c      	adds	r7, #28
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	f023 0210 	bic.w	r2, r3, #16
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800452c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	031b      	lsls	r3, r3, #12
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4313      	orrs	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800453e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	621a      	str	r2, [r3, #32]
}
 8004556:	bf00      	nop
 8004558:	371c      	adds	r7, #28
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004562:	b480      	push	{r7}
 8004564:	b085      	sub	sp, #20
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	f043 0307 	orr.w	r3, r3, #7
 8004584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	609a      	str	r2, [r3, #8]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	2201      	movs	r2, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a1a      	ldr	r2, [r3, #32]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	43db      	mvns	r3, r3
 80045fa:	401a      	ands	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1a      	ldr	r2, [r3, #32]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	431a      	orrs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	621a      	str	r2, [r3, #32]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004638:	2302      	movs	r3, #2
 800463a:	e05a      	b.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a21      	ldr	r2, [pc, #132]	@ (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004688:	d01d      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a1d      	ldr	r2, [pc, #116]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1b      	ldr	r2, [pc, #108]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a1a      	ldr	r2, [pc, #104]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a18      	ldr	r2, [pc, #96]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a17      	ldr	r2, [pc, #92]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a15      	ldr	r2, [pc, #84]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10c      	bne.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400
 8004708:	40000800 	.word	0x40000800
 800470c:	40000c00 	.word	0x40000c00
 8004710:	40010400 	.word	0x40010400
 8004714:	40014000 	.word	0x40014000
 8004718:	40001800 	.word	0x40001800

0800471c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e042      	b.n	80047b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fd f9d0 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2224      	movs	r2, #36	@ 0x24
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800475e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f82b 	bl	80047bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c0:	b0c0      	sub	sp, #256	@ 0x100
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	68d9      	ldr	r1, [r3, #12]
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	ea40 0301 	orr.w	r3, r0, r1
 80047e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004814:	f021 010c 	bic.w	r1, r1, #12
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004822:	430b      	orrs	r3, r1
 8004824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004836:	6999      	ldr	r1, [r3, #24]
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	ea40 0301 	orr.w	r3, r0, r1
 8004842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a88 <UART_SetConfig+0x2cc>)
 800484c:	429a      	cmp	r2, r3
 800484e:	d005      	beq.n	800485c <UART_SetConfig+0xa0>
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b8d      	ldr	r3, [pc, #564]	@ (8004a8c <UART_SetConfig+0x2d0>)
 8004858:	429a      	cmp	r2, r3
 800485a:	d104      	bne.n	8004866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800485c:	f7fe fbf0 	bl	8003040 <HAL_RCC_GetPCLK2Freq>
 8004860:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004864:	e003      	b.n	800486e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004866:	f7fe fbd7 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 800486a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004878:	f040 810c 	bne.w	8004a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800487c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004880:	2200      	movs	r2, #0
 8004882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004886:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800488a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800488e:	4622      	mov	r2, r4
 8004890:	462b      	mov	r3, r5
 8004892:	1891      	adds	r1, r2, r2
 8004894:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004896:	415b      	adcs	r3, r3
 8004898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800489a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800489e:	4621      	mov	r1, r4
 80048a0:	eb12 0801 	adds.w	r8, r2, r1
 80048a4:	4629      	mov	r1, r5
 80048a6:	eb43 0901 	adc.w	r9, r3, r1
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048be:	4690      	mov	r8, r2
 80048c0:	4699      	mov	r9, r3
 80048c2:	4623      	mov	r3, r4
 80048c4:	eb18 0303 	adds.w	r3, r8, r3
 80048c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048cc:	462b      	mov	r3, r5
 80048ce:	eb49 0303 	adc.w	r3, r9, r3
 80048d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048ea:	460b      	mov	r3, r1
 80048ec:	18db      	adds	r3, r3, r3
 80048ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f0:	4613      	mov	r3, r2
 80048f2:	eb42 0303 	adc.w	r3, r2, r3
 80048f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80048f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80048fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004900:	f7fb fc80 	bl	8000204 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4b61      	ldr	r3, [pc, #388]	@ (8004a90 <UART_SetConfig+0x2d4>)
 800490a:	fba3 2302 	umull	r2, r3, r3, r2
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	011c      	lsls	r4, r3, #4
 8004912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004916:	2200      	movs	r2, #0
 8004918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800491c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	1891      	adds	r1, r2, r2
 800492a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800492c:	415b      	adcs	r3, r3
 800492e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004934:	4641      	mov	r1, r8
 8004936:	eb12 0a01 	adds.w	sl, r2, r1
 800493a:	4649      	mov	r1, r9
 800493c:	eb43 0b01 	adc.w	fp, r3, r1
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800494c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004954:	4692      	mov	sl, r2
 8004956:	469b      	mov	fp, r3
 8004958:	4643      	mov	r3, r8
 800495a:	eb1a 0303 	adds.w	r3, sl, r3
 800495e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004962:	464b      	mov	r3, r9
 8004964:	eb4b 0303 	adc.w	r3, fp, r3
 8004968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004978:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800497c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004980:	460b      	mov	r3, r1
 8004982:	18db      	adds	r3, r3, r3
 8004984:	643b      	str	r3, [r7, #64]	@ 0x40
 8004986:	4613      	mov	r3, r2
 8004988:	eb42 0303 	adc.w	r3, r2, r3
 800498c:	647b      	str	r3, [r7, #68]	@ 0x44
 800498e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004996:	f7fb fc35 	bl	8000204 <__aeabi_uldivmod>
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4611      	mov	r1, r2
 80049a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004a90 <UART_SetConfig+0x2d4>)
 80049a2:	fba3 2301 	umull	r2, r3, r3, r1
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2264      	movs	r2, #100	@ 0x64
 80049aa:	fb02 f303 	mul.w	r3, r2, r3
 80049ae:	1acb      	subs	r3, r1, r3
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049b6:	4b36      	ldr	r3, [pc, #216]	@ (8004a90 <UART_SetConfig+0x2d4>)
 80049b8:	fba3 2302 	umull	r2, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049c4:	441c      	add	r4, r3
 80049c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ca:	2200      	movs	r2, #0
 80049cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049d8:	4642      	mov	r2, r8
 80049da:	464b      	mov	r3, r9
 80049dc:	1891      	adds	r1, r2, r2
 80049de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049e0:	415b      	adcs	r3, r3
 80049e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049e8:	4641      	mov	r1, r8
 80049ea:	1851      	adds	r1, r2, r1
 80049ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80049ee:	4649      	mov	r1, r9
 80049f0:	414b      	adcs	r3, r1
 80049f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a00:	4659      	mov	r1, fp
 8004a02:	00cb      	lsls	r3, r1, #3
 8004a04:	4651      	mov	r1, sl
 8004a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	00ca      	lsls	r2, r1, #3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	4642      	mov	r2, r8
 8004a16:	189b      	adds	r3, r3, r2
 8004a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	460a      	mov	r2, r1
 8004a20:	eb42 0303 	adc.w	r3, r2, r3
 8004a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	18db      	adds	r3, r3, r3
 8004a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a42:	4613      	mov	r3, r2
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a52:	f7fb fbd7 	bl	8000204 <__aeabi_uldivmod>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a90 <UART_SetConfig+0x2d4>)
 8004a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	2164      	movs	r1, #100	@ 0x64
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	3332      	adds	r3, #50	@ 0x32
 8004a6e:	4a08      	ldr	r2, [pc, #32]	@ (8004a90 <UART_SetConfig+0x2d4>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	f003 0207 	and.w	r2, r3, #7
 8004a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4422      	add	r2, r4
 8004a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a84:	e106      	b.n	8004c94 <UART_SetConfig+0x4d8>
 8004a86:	bf00      	nop
 8004a88:	40011000 	.word	0x40011000
 8004a8c:	40011400 	.word	0x40011400
 8004a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	1891      	adds	r1, r2, r2
 8004aac:	6239      	str	r1, [r7, #32]
 8004aae:	415b      	adcs	r3, r3
 8004ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ab6:	4641      	mov	r1, r8
 8004ab8:	1854      	adds	r4, r2, r1
 8004aba:	4649      	mov	r1, r9
 8004abc:	eb43 0501 	adc.w	r5, r3, r1
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	f04f 0300 	mov.w	r3, #0
 8004ac8:	00eb      	lsls	r3, r5, #3
 8004aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ace:	00e2      	lsls	r2, r4, #3
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	461d      	mov	r5, r3
 8004ad4:	4643      	mov	r3, r8
 8004ad6:	18e3      	adds	r3, r4, r3
 8004ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004adc:	464b      	mov	r3, r9
 8004ade:	eb45 0303 	adc.w	r3, r5, r3
 8004ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004af6:	f04f 0200 	mov.w	r2, #0
 8004afa:	f04f 0300 	mov.w	r3, #0
 8004afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b02:	4629      	mov	r1, r5
 8004b04:	008b      	lsls	r3, r1, #2
 8004b06:	4621      	mov	r1, r4
 8004b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	008a      	lsls	r2, r1, #2
 8004b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b14:	f7fb fb76 	bl	8000204 <__aeabi_uldivmod>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	4b60      	ldr	r3, [pc, #384]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	011c      	lsls	r4, r3, #4
 8004b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b38:	4642      	mov	r2, r8
 8004b3a:	464b      	mov	r3, r9
 8004b3c:	1891      	adds	r1, r2, r2
 8004b3e:	61b9      	str	r1, [r7, #24]
 8004b40:	415b      	adcs	r3, r3
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b48:	4641      	mov	r1, r8
 8004b4a:	1851      	adds	r1, r2, r1
 8004b4c:	6139      	str	r1, [r7, #16]
 8004b4e:	4649      	mov	r1, r9
 8004b50:	414b      	adcs	r3, r1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	f04f 0300 	mov.w	r3, #0
 8004b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b60:	4659      	mov	r1, fp
 8004b62:	00cb      	lsls	r3, r1, #3
 8004b64:	4651      	mov	r1, sl
 8004b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6a:	4651      	mov	r1, sl
 8004b6c:	00ca      	lsls	r2, r1, #3
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	4603      	mov	r3, r0
 8004b74:	4642      	mov	r2, r8
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b7c:	464b      	mov	r3, r9
 8004b7e:	460a      	mov	r2, r1
 8004b80:	eb42 0303 	adc.w	r3, r2, r3
 8004b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	008b      	lsls	r3, r1, #2
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004baa:	4641      	mov	r1, r8
 8004bac:	008a      	lsls	r2, r1, #2
 8004bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bb2:	f7fb fb27 	bl	8000204 <__aeabi_uldivmod>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4b38      	ldr	r3, [pc, #224]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2264      	movs	r2, #100	@ 0x64
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	1acb      	subs	r3, r1, r3
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	3332      	adds	r3, #50	@ 0x32
 8004bd0:	4a33      	ldr	r2, [pc, #204]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bdc:	441c      	add	r4, r3
 8004bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be2:	2200      	movs	r2, #0
 8004be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004be8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bfc:	4641      	mov	r1, r8
 8004bfe:	1851      	adds	r1, r2, r1
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	4649      	mov	r1, r9
 8004c04:	414b      	adcs	r3, r1
 8004c06:	607b      	str	r3, [r7, #4]
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c14:	4659      	mov	r1, fp
 8004c16:	00cb      	lsls	r3, r1, #3
 8004c18:	4651      	mov	r1, sl
 8004c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1e:	4651      	mov	r1, sl
 8004c20:	00ca      	lsls	r2, r1, #3
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	4603      	mov	r3, r0
 8004c28:	4642      	mov	r2, r8
 8004c2a:	189b      	adds	r3, r3, r2
 8004c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c2e:	464b      	mov	r3, r9
 8004c30:	460a      	mov	r2, r1
 8004c32:	eb42 0303 	adc.w	r3, r2, r3
 8004c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c50:	4649      	mov	r1, r9
 8004c52:	008b      	lsls	r3, r1, #2
 8004c54:	4641      	mov	r1, r8
 8004c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	008a      	lsls	r2, r1, #2
 8004c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c62:	f7fb facf 	bl	8000204 <__aeabi_uldivmod>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c70:	095b      	lsrs	r3, r3, #5
 8004c72:	2164      	movs	r1, #100	@ 0x64
 8004c74:	fb01 f303 	mul.w	r3, r1, r3
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	3332      	adds	r3, #50	@ 0x32
 8004c7e:	4a08      	ldr	r2, [pc, #32]	@ (8004ca0 <UART_SetConfig+0x4e4>)
 8004c80:	fba2 2303 	umull	r2, r3, r2, r3
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	f003 020f 	and.w	r2, r3, #15
 8004c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4422      	add	r2, r4
 8004c92:	609a      	str	r2, [r3, #8]
}
 8004c94:	bf00      	nop
 8004c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca0:	51eb851f 	.word	0x51eb851f

08004ca4 <malloc>:
 8004ca4:	4b02      	ldr	r3, [pc, #8]	@ (8004cb0 <malloc+0xc>)
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	f000 b825 	b.w	8004cf8 <_malloc_r>
 8004cae:	bf00      	nop
 8004cb0:	2000000c 	.word	0x2000000c

08004cb4 <sbrk_aligned>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8004cf4 <sbrk_aligned+0x40>)
 8004cb8:	460c      	mov	r4, r1
 8004cba:	6831      	ldr	r1, [r6, #0]
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	b911      	cbnz	r1, 8004cc6 <sbrk_aligned+0x12>
 8004cc0:	f000 f8ae 	bl	8004e20 <_sbrk_r>
 8004cc4:	6030      	str	r0, [r6, #0]
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 f8a9 	bl	8004e20 <_sbrk_r>
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	d103      	bne.n	8004cda <sbrk_aligned+0x26>
 8004cd2:	f04f 34ff 	mov.w	r4, #4294967295
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
 8004cda:	1cc4      	adds	r4, r0, #3
 8004cdc:	f024 0403 	bic.w	r4, r4, #3
 8004ce0:	42a0      	cmp	r0, r4
 8004ce2:	d0f8      	beq.n	8004cd6 <sbrk_aligned+0x22>
 8004ce4:	1a21      	subs	r1, r4, r0
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	f000 f89a 	bl	8004e20 <_sbrk_r>
 8004cec:	3001      	adds	r0, #1
 8004cee:	d1f2      	bne.n	8004cd6 <sbrk_aligned+0x22>
 8004cf0:	e7ef      	b.n	8004cd2 <sbrk_aligned+0x1e>
 8004cf2:	bf00      	nop
 8004cf4:	200001b8 	.word	0x200001b8

08004cf8 <_malloc_r>:
 8004cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cfc:	1ccd      	adds	r5, r1, #3
 8004cfe:	f025 0503 	bic.w	r5, r5, #3
 8004d02:	3508      	adds	r5, #8
 8004d04:	2d0c      	cmp	r5, #12
 8004d06:	bf38      	it	cc
 8004d08:	250c      	movcc	r5, #12
 8004d0a:	2d00      	cmp	r5, #0
 8004d0c:	4606      	mov	r6, r0
 8004d0e:	db01      	blt.n	8004d14 <_malloc_r+0x1c>
 8004d10:	42a9      	cmp	r1, r5
 8004d12:	d904      	bls.n	8004d1e <_malloc_r+0x26>
 8004d14:	230c      	movs	r3, #12
 8004d16:	6033      	str	r3, [r6, #0]
 8004d18:	2000      	movs	r0, #0
 8004d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004df4 <_malloc_r+0xfc>
 8004d22:	f000 f869 	bl	8004df8 <__malloc_lock>
 8004d26:	f8d8 3000 	ldr.w	r3, [r8]
 8004d2a:	461c      	mov	r4, r3
 8004d2c:	bb44      	cbnz	r4, 8004d80 <_malloc_r+0x88>
 8004d2e:	4629      	mov	r1, r5
 8004d30:	4630      	mov	r0, r6
 8004d32:	f7ff ffbf 	bl	8004cb4 <sbrk_aligned>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	4604      	mov	r4, r0
 8004d3a:	d158      	bne.n	8004dee <_malloc_r+0xf6>
 8004d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d40:	4627      	mov	r7, r4
 8004d42:	2f00      	cmp	r7, #0
 8004d44:	d143      	bne.n	8004dce <_malloc_r+0xd6>
 8004d46:	2c00      	cmp	r4, #0
 8004d48:	d04b      	beq.n	8004de2 <_malloc_r+0xea>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	4639      	mov	r1, r7
 8004d4e:	4630      	mov	r0, r6
 8004d50:	eb04 0903 	add.w	r9, r4, r3
 8004d54:	f000 f864 	bl	8004e20 <_sbrk_r>
 8004d58:	4581      	cmp	r9, r0
 8004d5a:	d142      	bne.n	8004de2 <_malloc_r+0xea>
 8004d5c:	6821      	ldr	r1, [r4, #0]
 8004d5e:	1a6d      	subs	r5, r5, r1
 8004d60:	4629      	mov	r1, r5
 8004d62:	4630      	mov	r0, r6
 8004d64:	f7ff ffa6 	bl	8004cb4 <sbrk_aligned>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d03a      	beq.n	8004de2 <_malloc_r+0xea>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	442b      	add	r3, r5
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	f8d8 3000 	ldr.w	r3, [r8]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	bb62      	cbnz	r2, 8004dd4 <_malloc_r+0xdc>
 8004d7a:	f8c8 7000 	str.w	r7, [r8]
 8004d7e:	e00f      	b.n	8004da0 <_malloc_r+0xa8>
 8004d80:	6822      	ldr	r2, [r4, #0]
 8004d82:	1b52      	subs	r2, r2, r5
 8004d84:	d420      	bmi.n	8004dc8 <_malloc_r+0xd0>
 8004d86:	2a0b      	cmp	r2, #11
 8004d88:	d917      	bls.n	8004dba <_malloc_r+0xc2>
 8004d8a:	1961      	adds	r1, r4, r5
 8004d8c:	42a3      	cmp	r3, r4
 8004d8e:	6025      	str	r5, [r4, #0]
 8004d90:	bf18      	it	ne
 8004d92:	6059      	strne	r1, [r3, #4]
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	bf08      	it	eq
 8004d98:	f8c8 1000 	streq.w	r1, [r8]
 8004d9c:	5162      	str	r2, [r4, r5]
 8004d9e:	604b      	str	r3, [r1, #4]
 8004da0:	4630      	mov	r0, r6
 8004da2:	f000 f82f 	bl	8004e04 <__malloc_unlock>
 8004da6:	f104 000b 	add.w	r0, r4, #11
 8004daa:	1d23      	adds	r3, r4, #4
 8004dac:	f020 0007 	bic.w	r0, r0, #7
 8004db0:	1ac2      	subs	r2, r0, r3
 8004db2:	bf1c      	itt	ne
 8004db4:	1a1b      	subne	r3, r3, r0
 8004db6:	50a3      	strne	r3, [r4, r2]
 8004db8:	e7af      	b.n	8004d1a <_malloc_r+0x22>
 8004dba:	6862      	ldr	r2, [r4, #4]
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	bf0c      	ite	eq
 8004dc0:	f8c8 2000 	streq.w	r2, [r8]
 8004dc4:	605a      	strne	r2, [r3, #4]
 8004dc6:	e7eb      	b.n	8004da0 <_malloc_r+0xa8>
 8004dc8:	4623      	mov	r3, r4
 8004dca:	6864      	ldr	r4, [r4, #4]
 8004dcc:	e7ae      	b.n	8004d2c <_malloc_r+0x34>
 8004dce:	463c      	mov	r4, r7
 8004dd0:	687f      	ldr	r7, [r7, #4]
 8004dd2:	e7b6      	b.n	8004d42 <_malloc_r+0x4a>
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	d1fb      	bne.n	8004dd4 <_malloc_r+0xdc>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6053      	str	r3, [r2, #4]
 8004de0:	e7de      	b.n	8004da0 <_malloc_r+0xa8>
 8004de2:	230c      	movs	r3, #12
 8004de4:	6033      	str	r3, [r6, #0]
 8004de6:	4630      	mov	r0, r6
 8004de8:	f000 f80c 	bl	8004e04 <__malloc_unlock>
 8004dec:	e794      	b.n	8004d18 <_malloc_r+0x20>
 8004dee:	6005      	str	r5, [r0, #0]
 8004df0:	e7d6      	b.n	8004da0 <_malloc_r+0xa8>
 8004df2:	bf00      	nop
 8004df4:	200001bc 	.word	0x200001bc

08004df8 <__malloc_lock>:
 8004df8:	4801      	ldr	r0, [pc, #4]	@ (8004e00 <__malloc_lock+0x8>)
 8004dfa:	f000 b84b 	b.w	8004e94 <__retarget_lock_acquire_recursive>
 8004dfe:	bf00      	nop
 8004e00:	200002fc 	.word	0x200002fc

08004e04 <__malloc_unlock>:
 8004e04:	4801      	ldr	r0, [pc, #4]	@ (8004e0c <__malloc_unlock+0x8>)
 8004e06:	f000 b846 	b.w	8004e96 <__retarget_lock_release_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	200002fc 	.word	0x200002fc

08004e10 <memset>:
 8004e10:	4402      	add	r2, r0
 8004e12:	4603      	mov	r3, r0
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d100      	bne.n	8004e1a <memset+0xa>
 8004e18:	4770      	bx	lr
 8004e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1e:	e7f9      	b.n	8004e14 <memset+0x4>

08004e20 <_sbrk_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d06      	ldr	r5, [pc, #24]	@ (8004e3c <_sbrk_r+0x1c>)
 8004e24:	2300      	movs	r3, #0
 8004e26:	4604      	mov	r4, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	f7fc fed4 	bl	8001bd8 <_sbrk>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d102      	bne.n	8004e3a <_sbrk_r+0x1a>
 8004e34:	682b      	ldr	r3, [r5, #0]
 8004e36:	b103      	cbz	r3, 8004e3a <_sbrk_r+0x1a>
 8004e38:	6023      	str	r3, [r4, #0]
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	200002f8 	.word	0x200002f8

08004e40 <__errno>:
 8004e40:	4b01      	ldr	r3, [pc, #4]	@ (8004e48 <__errno+0x8>)
 8004e42:	6818      	ldr	r0, [r3, #0]
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	2000000c 	.word	0x2000000c

08004e4c <__libc_init_array>:
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e84 <__libc_init_array+0x38>)
 8004e50:	4c0d      	ldr	r4, [pc, #52]	@ (8004e88 <__libc_init_array+0x3c>)
 8004e52:	1b64      	subs	r4, r4, r5
 8004e54:	10a4      	asrs	r4, r4, #2
 8004e56:	2600      	movs	r6, #0
 8004e58:	42a6      	cmp	r6, r4
 8004e5a:	d109      	bne.n	8004e70 <__libc_init_array+0x24>
 8004e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e8c <__libc_init_array+0x40>)
 8004e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e90 <__libc_init_array+0x44>)
 8004e60:	f000 f828 	bl	8004eb4 <_init>
 8004e64:	1b64      	subs	r4, r4, r5
 8004e66:	10a4      	asrs	r4, r4, #2
 8004e68:	2600      	movs	r6, #0
 8004e6a:	42a6      	cmp	r6, r4
 8004e6c:	d105      	bne.n	8004e7a <__libc_init_array+0x2e>
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
 8004e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e74:	4798      	blx	r3
 8004e76:	3601      	adds	r6, #1
 8004e78:	e7ee      	b.n	8004e58 <__libc_init_array+0xc>
 8004e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7e:	4798      	blx	r3
 8004e80:	3601      	adds	r6, #1
 8004e82:	e7f2      	b.n	8004e6a <__libc_init_array+0x1e>
 8004e84:	08004ef8 	.word	0x08004ef8
 8004e88:	08004ef8 	.word	0x08004ef8
 8004e8c:	08004ef8 	.word	0x08004ef8
 8004e90:	08004efc 	.word	0x08004efc

08004e94 <__retarget_lock_acquire_recursive>:
 8004e94:	4770      	bx	lr

08004e96 <__retarget_lock_release_recursive>:
 8004e96:	4770      	bx	lr

08004e98 <memcpy>:
 8004e98:	440a      	add	r2, r1
 8004e9a:	4291      	cmp	r1, r2
 8004e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ea0:	d100      	bne.n	8004ea4 <memcpy+0xc>
 8004ea2:	4770      	bx	lr
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eae:	4291      	cmp	r1, r2
 8004eb0:	d1f9      	bne.n	8004ea6 <memcpy+0xe>
 8004eb2:	bd10      	pop	{r4, pc}

08004eb4 <_init>:
 8004eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb6:	bf00      	nop
 8004eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eba:	bc08      	pop	{r3}
 8004ebc:	469e      	mov	lr, r3
 8004ebe:	4770      	bx	lr

08004ec0 <_fini>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	bf00      	nop
 8004ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec6:	bc08      	pop	{r3}
 8004ec8:	469e      	mov	lr, r3
 8004eca:	4770      	bx	lr
